import {
  allArticle,
  getArticle,
  addArticle,
  deleteArticle,
  uptateArticle
} from '@/axios/api/article'
export default {

  state: {
    articleType: ['java', 'vue', 'git', 'js', 'css3', 'less', 'canvas', 'sql', 'html5', 'node', 'webpack'],
    articleCategory: ['技术', '笔记', '作品', '收藏'],
    article_id: '',
    articleList: [{
        "summary": "面试时遇到的一些问题 和字节总结的一些",
        "tags": [
          "js"
        ],
        "is_private": true,
        "status": "draft",
        "read": 0,
        "praise": 0,
        "review": 0,
        "toped": false,
        "hotted": false,
        "weight": 0,
        "_id": "5eff215526890e0e74b84036",
        "title": "js问题",
        "content": "<p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;判断js对象是否拥有某一个属性</span></p><p>obj.hasOwnProperty(&#39;name&#39;)</p><p>hasOwnProperty&nbsp;判断是否是对象自身的属性&nbsp;要是获取原型的属性可以用&nbsp;.&nbsp;或者in</p><p>instanceof&nbsp;可以确定一个对象是否是特定构造函数的实例</p><p>Reflect.get()</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;手机一像素问题</span></p><p><span style=\"color: #6796e6;\">*</span>&nbsp;图片替换&nbsp;背景替换</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;shadow&nbsp;模拟</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;viewport+rem+js&nbsp;根据dpr动态修改viewport</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;数组去重&nbsp;</span></p><p>Array.from(new&nbsp;Set(arr))</p><p>const&nbsp;res&nbsp;=&nbsp;new&nbsp;Map();</p><p>arr.filter((a)&nbsp;=&gt;&nbsp;!res.has(a)&nbsp;&amp;&amp;&nbsp;res.set(a,&nbsp;1))</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;元素居中&nbsp;</span></p><p>&nbsp;justify-content:&nbsp;center&nbsp;align-items:&nbsp;center;</p><p>&nbsp;justify-items&nbsp;align-items</p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;for循环中&nbsp;异步操作</span></p><p>&nbsp;promise中，使用then处理</p><p>&nbsp;回调</p><p>&nbsp;async&nbsp;await</p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;webpack&nbsp;配置</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;router连续点击多次路由报错解决方法</span></p><p>&nbsp;vue-router&nbsp;升级到3.1.x&nbsp;后，重复点击导航时，控制台出现报错&nbsp;</p><p>&nbsp;回调形式改成promise&nbsp;api了，返回的是promise，如果没有捕获到错误，控制台始终会出现如上图的警告</p><p>&nbsp;重写push&nbsp;catch捕获异常&nbsp;手动删除原有路由</p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;判断一个对象是否是空对象&nbsp;</span></p><p>&nbsp;1，装换成字符串&nbsp;stringify&nbsp;</p><p>&nbsp;<span style=\"color: #6796e6;\">2.</span>&nbsp;for&nbsp;in</p><p>&nbsp;<span style=\"color: #6796e6;\">3.</span>&nbsp;keys</p><p><br/></p><p>&nbsp;</p><p><br/><br/></p><p><br/></p>",
        "type_url": "",
        "type": "笔记",
        "category": "笔记",
        "user_info_nick": "qyq",
        "user_info_cover": "//www.gravatar.com/avatar/6812bbadcf52b6ef6b5ad14f90f0be9c?s=200&r=pg&d=mm",
        "user_info_id": "5ef75a6299d6040b785444fc",
        "seo_title": "js问题",
        "cover": "http://pic.ik123.com/uploads/allimg/170302/4-1F3021R536.jpg",
        "created": 1593778517378,
        "__v": 0
      },
      {
        "summary": "看视频js技术总结的",
        "tags": [
          "js"
        ],
        "is_private": false,
        "status": "draft",
        "read": 0,
        "praise": 0,
        "review": 0,
        "toped": false,
        "hotted": false,
        "weight": 0,
        "_id": "5eff21dc26890e0e74b84037",
        "title": "es6总结",
        "content": "<p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;堆栈的区别</span></p><p>栈(stack)会自动分配内存空间，会自动释放。堆(heap)动态分配的内存，大小不定也不会自动释放&nbsp;不连续内存。</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;值类型和引用类型</span></p><p>值类型存放的栈里&nbsp;引用类型存放在堆里&nbsp;</p><p>值类型&nbsp;undefined,String,Boolean,Null,Number，symbor&nbsp;引用类型&nbsp;object&nbsp;array&nbsp;特殊引用类型&nbsp;function</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;typeOf和基础类型</span></p><p>typeOf&nbsp;输出&nbsp;undefined,String,Boolean,Null,Number，symbor&nbsp;object&nbsp;function&nbsp;（没有数组）</p><p>undefined（表示未定义）&nbsp;null（表示空指针）&nbsp;相差甚微</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;实例和继承&nbsp;重写</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;原型原型链&nbsp;</span></p><p>构造函数创建的实例对象有__proto__原型，指向构造函数的原型对象。</p><p>原型链&nbsp;获取对象属性时，对象没有会去对象的隐式原型（<span style=\"color: #569cd6;font-weight: bold;\">__proto__</span>）上找&nbsp;也就是找上构造函数（class）的原型对象上（prototype）上找</p><p>没有的话在去class的__proto__上找，直到找到object.prototype上，这个过程&nbsp;结构&nbsp;叫做原型链</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;prototype和—proto—</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;原型关系</span></p><p>每个class都有显示原型prototype&nbsp;每个实例都有__proto__&nbsp;实例.<span style=\"color: #569cd6;font-weight: bold;\">__proto__</span>&nbsp;==&nbsp;class.prototype</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;instanceof&nbsp;e</span></p><p>判断对象的原型链上是否有&nbsp;e原型</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;闭包&nbsp;作用俞</span></p><p>块级作用域&nbsp;闭包常常用来「间接访问一个变量」。换句话说，「隐藏一个变量」</p><p>让全局可以访问局部变量</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;this指向</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;循环创建标签&nbsp;块级作用域&nbsp;</span></p><p>for&nbsp;let</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;&nbsp;call&nbsp;apply&nbsp;bind&nbsp;</span></p><p>改变this指向参数不同&nbsp;bind&nbsp;返回this指向的函数&nbsp;</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;同步异步&nbsp;</span></p><p>settimeOut</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;promise&nbsp;使用&nbsp;</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;自定义属性&nbsp;</span></p><p>setAttribute&nbsp;dataset</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;事件&nbsp;和bpm&nbsp;</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;事件冒泡&nbsp;和事件代理&nbsp;</span></p><p>事件冒泡：先触发子元素的事件处理器，然后再触发父元素的事件处理器，一层一层向上，</p><p>事件代理：添加父元素的事件来代替给子元素添加事件，通过event.targer&nbsp;判断子元素</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;阻止默认行为&nbsp;阻止冒泡&nbsp;</span></p><p>e.stopPropagation();&nbsp;阻止冒泡</p><p>e.preventDefault();&nbsp;阻止默认事件</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;xmlHttpRequery&nbsp;</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;跨域&nbsp;</span></p><p>协议&nbsp;域名&nbsp;端口&nbsp;jsonp</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;状态码&nbsp;</span></p><p>304&nbsp;重定向&nbsp;200&nbsp;成功&nbsp;404&nbsp;无文件&nbsp;403&nbsp;服务器拒绝&nbsp;没有token等问题&nbsp;401&nbsp;请求有问题&nbsp;500&nbsp;服务器出错</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;es6&nbsp;</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;new操作符具体干了什么呢?</span></p><p>1、创建一个空对象，并且this&nbsp;变量引用该对象，同时还继承了该函数的原型。</p><p>2、属性和方法被加入到this&nbsp;引用的对象中。</p><p>3、新创建的对象由this&nbsp;所引用，并且最后隐式的返回this&nbsp;。</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;写一个function，清除字符串前后的空格</span></p><p>String.prototype.trim=&nbsp;function(){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.replace(/^\\s+/,&quot;&quot;).replace(/\\s+$/,&quot;&quot;);</p><p>}</p><p>.trimState,.trim()</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;cspf&nbsp;请求伪造&nbsp;xss注入攻击</span></p><p>&nbsp;&nbsp;xss&nbsp;Xss是攻击者在web页面插入恶意的代码&nbsp;</p><p>&nbsp;&nbsp;cspf&nbsp;是攻击者可以盗用你的身份，以你的名义发送恶意请求</p><p>&nbsp;&nbsp;防护&nbsp;xss&nbsp;利用字符编码&nbsp;利用XSS-Filter&nbsp;过滤用户输入的内容</p><p>&nbsp;&nbsp;cspf&nbsp;关键操作我们应该采用post方法。.在重要的请求中添加Token</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;前端构建&nbsp;</span></p><p>1文件压缩&nbsp;2代码整合，编译less&nbsp;es6等语法</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;什么是事件循环</span></p><p>JavaScript&nbsp;是一门单线程语言，异步操作都是放到事件循环队列里面，等待主执行栈来执行的，并没有专门的异步执行线程。</p><p>分为主任务，微任务，宏任务</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;数组去重</span></p><p>数组遍历</p><p>return&nbsp;arr.reduce((prev,cur)&nbsp;=&gt;&nbsp;prev.includes(cur)&nbsp;?&nbsp;prev&nbsp;:&nbsp;[<span style=\"color: #ce9178;\">...prev,cur</span>],[]);</p><p>let&nbsp;arrOb&nbsp;=&nbsp;arr.reduce((pre,&nbsp;cur)&nbsp;=&gt;&nbsp;(pre[<span style=\"color: #ce9178;\">cur</span>]&nbsp;||&nbsp;0)&nbsp;+&nbsp;1&nbsp;&amp;&amp;&nbsp;pre)</p><p>let&nbsp;map&nbsp;=&nbsp;new&nbsp;Map();&nbsp;可以对象去重</p><p>arr.filter&nbsp;indexOf</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;深拷贝</span></p><p>可以利用&nbsp;JSON.parse(JSON.stringify())&nbsp;不多对引用类型&nbsp;null&nbsp;对象等会出错&nbsp;例如date&nbsp;会编译成字符串</p><p>...&nbsp;assign&nbsp;拷贝第一层&nbsp;遍历对象hasOwnProperty&nbsp;判断是否是原型上的属性，再用typeOf&nbsp;判断类型，对象进行回调&nbsp;返回一个对象</p><p>typeOf&nbsp;null&nbsp;//object</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;action&nbsp;和&nbsp;mutaction</span></p><p>在&nbsp;mutation&nbsp;中混合异步调用会导致你的程序很难调试。例如，当你调用了两个包含异步回调的&nbsp;mutation&nbsp;来改变状态，你怎么知道什么时候回调和哪个先回调呢？这就是为什么我们要区分这两个概念。在&nbsp;Vuex&nbsp;中，mutation&nbsp;都是同步事务：</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;this指向</span></p><p><span style=\"color: #6796e6;\">*</span>&nbsp;全局调用&nbsp;this执行window</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;作为对象调用&nbsp;this执行调用方法的</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;构造函数中的this指向新创建的对象本身。</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;call&nbsp;apply&nbsp;bind&nbsp;改变this指向</p><p><span style=\"color: #6796e6;\">1.</span>&nbsp;箭头函数自身无this</p><p><span style=\"color: #6796e6;\">2.</span>&nbsp;如果箭头函数的直接上层作用域拥有this，则使用之；如果没有，则沿着其作用域链继续向上查找</p><p><span style=\"color: #6796e6;\">3.</span>&nbsp;箭头函数中使用的this指向其被定义时所在的作用域；普通函数中使用的this指向运行时所在的作用域</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;节流防抖</span></p><p>节流一段时间内不触发，滚动浏览条，输入内容，防抖拖动10像素触发10次改变成5次触发</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;promise</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">###&nbsp;行为特征</span></p><p>每个Promise有三种状态：进行中(pending)、已成功(resolved)和已失败(rejected)。</p><p>创建即进入pending状态，在传入方法中一旦调用了resolve/reject方法，最终状态便变成resolved/rejected。</p><p>一旦变成结果状态，即更改成resolved/rejected，状态便被冷冻，不能再被更改。</p><p><span style=\"color: #569cd6;font-weight: bold;\">###&nbsp;静态方法</span></p><p>Promise.resolve&nbsp;Promise.reject&nbsp;将同步操作装换成异步操作</p><p>Promise.all&nbsp;汇总&nbsp;所有的异步</p><p>Promise.race&nbsp;返回最快的</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;数据结构</span></p><p>set()&nbsp;没有索引&nbsp;类似数组&nbsp;没有相同数据</p><p>symbol&nbsp;新的数据类型&nbsp;没有相同的值</p><p>WeakSet&nbsp;值只能是对象&nbsp;WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名&nbsp;WeakMap的键名所指向的对象，不计入垃圾回收机制</p><p>Map&nbsp;它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键&nbsp;和内存绑定的</p><p>键值不同</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;call&nbsp;apply&nbsp;bind</span></p><p><span style=\"color: #6796e6;\">*</span>&nbsp;三者都可以改变函数的this对象指向。</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;三者第一个参数都是this要指向的对象，如果如果没有这个参数，默认指向全局window。</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;三者都可以传参，但是apply是数组，而call是有顺序的传入。</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;bind&nbsp;是返回对应函数，便于稍后调用；apply&nbsp;、call&nbsp;则是立即执行&nbsp;。</p><p><br/></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;Reflect</span></p><p>Reflect.getOwnPropertyDescriptor&nbsp;//读取数据配置的</p><p>和&nbsp;Object.defineProperty&nbsp;理解&nbsp;每个属性都有一个默认属性&nbsp;{get&nbsp;set&nbsp;value}</p><p>preventExtensions，&nbsp;seal，&nbsp;freeze&nbsp;冻结对象&nbsp;Object.defineProperty也可以干</p><p>Reflect.isExtensible()&nbsp;对象是否可扩展</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;了解&nbsp;</span></p><p><span style=\"color: #6796e6;\">*</span>&nbsp;Cookie与Session的区别&nbsp;</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;Object.defineProperty也可以配置特征&nbsp;Reflect.defineProperty({},&nbsp;&#39;name&#39;,&nbsp;{value:&nbsp;&#39;Mike2&#39;})</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;ajax&nbsp;get和post区别</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;cspf&nbsp;请求伪造&nbsp;xss注入攻击&nbsp;</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;函数&nbsp;call&nbsp;apply的区别&nbsp;都是改变this指向，参数不同</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;闭包有什么特性，负面影响。&nbsp;变量常驻内存，不回收.</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;==&nbsp;会尝试数据类型转换</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;数组去重</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;手写深拷贝&nbsp;assign不是深拷贝（对象合并的）</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;location.search&nbsp;和&nbsp;URLsearchParams&nbsp;</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;js&nbsp;动画&nbsp;requestAnimaionFrame</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;constructor&nbsp;class&nbsp;里的构造函数</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;promise&nbsp;正则表达式&nbsp;call&nbsp;apply&nbsp;结点api&nbsp;</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;结点api&nbsp;</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中。</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</p><p><br/></p><p>appendChild();&nbsp;&nbsp;//添加</p><p>removeChild();&nbsp;&nbsp;//移除</p><p>createElement();&nbsp;//&nbsp;创建一个具体的元素</p><p>addEventListener&nbsp;添加事件</p><p>setattribute&nbsp;添加属性</p><p>createTextNode()&nbsp;//文本结点</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;数组api</p><p>arr.sort()&nbsp;//返回负数，正数，</p><p>arr.reverse()&nbsp;//翻转数组</p><p>arr.map()&nbsp;//&nbsp;每个值指定函数</p><p>arr.filter()&nbsp;//过滤</p><p>arr.every()&nbsp;//都满足条件返回true</p><p>arr.some()&nbsp;//有一个满足条件返回true</p><p>reduce()和&nbsp;reduceRight()&nbsp;//这两个方法都会实现迭代数组的所有项，然后构建一个最终返回的值。reduce()方法从数组的第一项开始，逐个遍历到最后。而&nbsp;reduceRight()则从数组的最后一项开始，向前遍历到第一项。</p><p>里面的函数有四个值&nbsp;prev(上次执行结果),&nbsp;cur(遍历的值),&nbsp;index,&nbsp;array&nbsp;</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;Ajax&nbsp;fatch&nbsp;axios&nbsp;</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;git基本用法&nbsp;</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;git&nbsp;演示&nbsp;debug&nbsp;</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;fiddler&nbsp;抓包&nbsp;</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;加载过程&nbsp;</span></p><p>解析url&nbsp;三次握手&nbsp;渲染页面</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;性能优化&nbsp;</span></p><p>减少dom操作&nbsp;缓存dom&nbsp;一次性插入结点</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;git基本用法&nbsp;</span></p><p>创建项目-&gt;&nbsp;配置ssh&nbsp;-&gt;&nbsp;clone&nbsp;-&gt;&nbsp;创建分支&nbsp;-&gt;&nbsp;&nbsp;add&nbsp;commit&nbsp;-&gt;&nbsp;push&nbsp;-&gt;&nbsp;pull&nbsp;-&gt;&nbsp;通过&nbsp;-&gt;&nbsp;&nbsp;合并分支&nbsp;</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;cdn加速</span></p><p><span style=\"color: #6796e6;\">*</span>&nbsp;网站排名优化</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;加载速度</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;&nbsp;服务器压力</p><p>读&nbsp;instanceof&nbsp;filter</p><p><br/></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;es6+</span></p><p>class&nbsp;类里&nbsp;写&nbsp;get&nbsp;set&nbsp;来对属性的监听处理</p><p>Objetc.defineProperty&nbsp;描述符&nbsp;value&nbsp;值&nbsp;writable&nbsp;修改&nbsp;configurable&nbsp;删除&nbsp;enumerable&nbsp;枚举&nbsp;get&nbsp;set&nbsp;属性的监听</p><p>proxy&nbsp;两个参数&nbsp;1,对象&nbsp;2,操作&nbsp;{get&nbsp;set}&nbsp;(target,prop)</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;js导入导出</span></p><p>es5&nbsp;module.exports&nbsp;=&nbsp;{}&nbsp;require()</p><p>es6&nbsp;export&nbsp;default{}&nbsp;import&nbsp;from</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;as&nbsp;关键字&nbsp;</span></p><p>替换对象名</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;padStart</span></p><p>填充数字&nbsp;01&nbsp;05&nbsp;10&nbsp;15</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;flat</span></p><p>flat&nbsp;flatMap&nbsp;返回扁平化的数组&nbsp;三维数组转换一维数组</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;revocable</span></p><p>proxy&nbsp;返回对象&nbsp;{proxy,revoke}&nbsp;revoke()取消代理</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;Iterable，Iterator，Generator&nbsp;三者的区别</span></p><p>Iterable（可迭代对象）&nbsp;是指有&nbsp;[<span style=\"color: #ce9178;\">Symbol.iterator</span>]&nbsp;属性的对象&nbsp;array&nbsp;set&nbsp;map等</p><p>iterator（迭代器）&nbsp;迭代器协议&nbsp;&nbsp;Iterator&nbsp;必须有&nbsp;next()&nbsp;方法&nbsp;返回一个对象</p><p>Generator&nbsp;函数是&nbsp;ES6&nbsp;提供的一种异步编程解决方案</p><p>Generator&nbsp;返回可迭代对象</p><p>iterator&nbsp;其实是一个很简单的东西，基本就是一个具有指定属性结构的类型，让对象原生支持语法层面的循环。而&nbsp;Generator&nbsp;不是用来循环的，它更重要的是具有实现协程的特性，是一个相对复杂且强大得多的东西。</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;*&nbsp;yield</span></p><p>类似把连续执行的函数变成可迭代的&nbsp;next()&nbsp;执行到&nbsp;yield&nbsp;暂停&nbsp;执行next返回符合迭代器协议的数据</p><p>next&nbsp;的参数用来指定上一个yield&nbsp;语句的返回值(yield&nbsp;默认返回&nbsp;undefined)&nbsp;</p><p>第一个next(参数)&nbsp;因为第一个next&nbsp;前面是不可能有&nbsp;yield&nbsp;参数是指向&nbsp;上一次yield&nbsp;语句的返回值</p><p>yield后&nbsp;跟*&nbsp;跟可迭代的数据</p><p>Generator&nbsp;返回的是&nbsp;Iterator对象&nbsp;可以用&nbsp;...&nbsp;for&nbsp;of&nbsp;这是不用再调用next</p><p><br/></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;前端性能优化</span></p><p>1.优化DNS查询</p><p>2.优化TCP协议</p><p>3.优化发送HTTP请求</p><p>4.优化接受响应</p><p>6.优化CSS、JS请求</p><p>7.使用懒加载</p><p>10.优化图片大小</p><p>11.合理运用异步</p><p>12.减少dom操作</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;break&nbsp;contince</span></p><p>退出循环&nbsp;退出单次循环&nbsp;</p><p><span style=\"color: #569cd6;font-weight: bold;\">#&nbsp;post&nbsp;和put</span></p><p>put方法用于创建或者替换整个资源</p><p>post方法发出的请求时，应该按照请求的具体资源的具体语义来对该资源做相应的处理</p><p>目的性不同</p><p><span style=\"color: #569cd6;font-weight: bold;\">#&nbsp;params&nbsp;query</span></p><p>传值的坑&nbsp;params&nbsp;需要name</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;asyns&nbsp;await</span></p><p>promise&nbsp;参数传递太麻烦了&nbsp;是Generator的语法糖&nbsp;Generator暂停函数执行在开始返回的是iterator对象用.next()执行&nbsp;await返回的是promise对象&nbsp;.then()&nbsp;执行</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;Object.fromEntries()&nbsp;是&nbsp;Object.entries&nbsp;的反转。&nbsp;fromEntries不兼容</span></p><p>es6&nbsp;git&nbsp;webpack&nbsp;三大框架&nbsp;服务器部署&nbsp;ts</p><p><br/></p><p>git&nbsp;posmie&nbsp;awite&nbsp;写代码&nbsp;</p><p><br/></p>",
        "type_url": "",
        "type": "笔记",
        "category": "笔记",
        "user_info_nick": "qyq",
        "user_info_cover": "//www.gravatar.com/avatar/6812bbadcf52b6ef6b5ad14f90f0be9c?s=200&r=pg&d=mm",
        "user_info_id": "5ef75a6299d6040b785444fc",
        "seo_title": "测试文章",
        "cover": "http://pic.ik123.com/uploads/allimg/170302/4-1F3021R535.jpg",
        "created": 1593778652646,
        "__v": 0
      },
      {
        "summary": "vue总结",
        "tags": [
          "vue"
        ],
        "is_private": false,
        "status": "draft",
        "read": 0,
        "praise": 0,
        "review": 0,
        "toped": false,
        "hotted": false,
        "weight": 0,
        "_id": "5eff22b426890e0e74b84038",
        "title": "vue总结",
        "content": "<p><span style=\"color: #569cd6;font-weight: bold;\">#&nbsp;Vue</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;v-show和v-if</span></p><p><span style=\"color: #6796e6;\">*</span>&nbsp;v-show&nbsp;通过css&nbsp;display控制显示和隐藏</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;v-if&nbsp;是真正的组件渲染和销毁</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;频繁切换用show，反则用if</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;v-for&nbsp;为什么用key</span></p><p>diff算法中&nbsp;是通过tab标签和key来判断是否是相同结点，避免结点重复渲染。正确的设置key可以提高更新虚拟DOM的效率&nbsp;&nbsp;减少渲染次数提高渲染性能</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;diff是什么</span></p><p>简单的说就是差异算法，计算两位文件，目录等的差异，react&nbsp;内的diff算法，&nbsp;linux的diff算法，git的diff算法，vue等</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;描述vue的生命周期</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">###&nbsp;分为四个阶段&nbsp;</span></p><p><span style=\"color: #6796e6;\">*</span>&nbsp;beforeCreate</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;created&nbsp;(创建完成可以访问this)</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;beforemount</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;mounted&nbsp;(渲染完成可以访问dom结点)</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;beforeUptate</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;uptated</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;beforeDestory</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;destory</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;组件如何通信</span></p><p><span style=\"color: #6796e6;\">*</span>&nbsp;父子组件通过props和$emit</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;自定义事件&nbsp;用emit添加自定义事件&nbsp;在通过evnet.$on()和evnet.$off()&nbsp;进行监听</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;vuex&nbsp;所有组件的仓库</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;描述组件渲染和更新过程</span></p><p>分为两个过程</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;初始打包渲染过程</p><p>1.将模板渲染成render函数</p><p>2.触发响应式，监听getter，setter,</p><p>3.执行render函数，生成虚拟dom</p><p>4.在通过patch函数将vdom渲染到页面上</p><p><br/></p><p><span style=\"color: #6796e6;\">*</span>&nbsp;更新过程</p><p>1.修改data数据，触发setter,</p><p>2.执行render函数，生成虚拟dom</p><p>3.运用diff算法，算出newVdom和oldVdom最小改动</p><p>4.在通过patch函数，替换dom结点</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;双向数据绑定&nbsp;model原理</span></p><p>编译过程中动态给input添加input事件&nbsp;value&nbsp;=&nbsp;#event.target.value</p><p>在触发render函数，渲染到页面上</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;mvvm</span></p><p>数据驱动视图</p><p>分为model&nbsp;，view，和viewModel&nbsp;，</p><p>view代表视图，model代表数据&nbsp;viewModel是一个同步view和model的对象，通过双向数据绑定将view和model连接到一起</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;computed和watch的区别</span></p><p>理论上computed能干的事watch&nbsp;都能干，computed会缓存数据，当所依赖的数据发生改变时才开始重新计算，善用computed可以提高性能</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;为何组件data是一个函数</span></p><p>.vue组件编译后其实是个class，不是一个对象，在每个地方使用组件的时候对class进行了实例化，实例化的时候执行data，data不是函数的话，data就共享了，修改一个另一个也会跟着改变，使用函数的话，就形成一个闭包，相互不影响。</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;将组件的prop全部传给子组件</span></p><p>运用$props</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;实现v-model</span></p><p>let&nbsp;obj&nbsp;=&nbsp;{txt:&#39;&#39;}</p><p>document.addEventListener(&quot;keyup&quot;,function(e){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;obj.txt&nbsp;=&nbsp;e.target.value;//监听input框内容</p><p>})</p><p>Object,defineProperty(obj,&#39;txt&#39;,{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;set:function(val){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;box&quot;).innerHML&nbsp;=&nbsp;val;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;get:{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;obj</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>})</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;抽离相同组件</span></p><p>mixin：混合代码，&nbsp;缺点&nbsp;-&nbsp;不便于阅读，定义属性命名冲突，增加代码复杂性</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;异步组件&nbsp;</span></p><p>加载大组件，路由的使用，优化性能</p><p>components:&nbsp;{&nbsp;a:&nbsp;()=&gt;&nbsp;imports()&nbsp;}</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;使用keep-alive</span></p><p>1.缓存组件，不需要重复渲染</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;beforeDestory</span></p><p>解绑自定义事件&nbsp;$.event.on()&nbsp;放置内存泄漏</p><p>清除定时器，解绑自定义dom事件&nbsp;scroll</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;什么是作用域插槽&nbsp;slot</span></p><p>子组件留了一个或多个坑，父组件向子组件传递，填坑，具名插槽&nbsp;</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;vuex</span></p><p>state&nbsp;数据</p><p>getter&nbsp;获取state内的数据</p><p>action&nbsp;可以使用异步方法（可以多个mutation的合计）</p><p>mutation&nbsp;简单的业务方法</p><p>modules&nbsp;多个组件</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;vue-router&nbsp;的路由模式</span></p><p>hash&nbsp;和&nbsp;history</p><p>hash&nbsp;url链接中带有#，#url改变时页面不刷新，onhashchange监听路由，页面提交时&nbsp;#后不提交到服务器端&nbsp;</p><p>history&nbsp;利用的H5&nbsp;pushState()&nbsp;修改浏览器的历史栈，&nbsp;onpopsState&nbsp;方法监听路由，改变时页面不刷新，符合url规范，需要后端配合&nbsp;刷新时没有对应文件时返回404</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;用vnode描述dom结构</span></p><p>&quot;<span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">div</span>&nbsp;<span style=\"color: #9cdcfe;\">id</span>=<span style=\"color: #ce9178;\">&#39;div&#39;</span>&nbsp;<span style=\"color: #9cdcfe;\">class</span>=<span style=\"color: #ce9178;\">&#39;container&#39;</span><span style=\"color: #808080;\">&gt;&lt;</span><span style=\"color: #569cd6;\">p</span><span style=\"color: #808080;\">&gt;</span>vdom<span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">p</span><span style=\"color: #808080;\">&gt;&lt;/</span><span style=\"color: #569cd6;\">div</span><span style=\"color: #808080;\">&gt;</span>&quot;</p><p>{tag:&#39;div&#39;,props:{className:&#39;container&#39;,id:&#39;div&#39;},children:[<span style=\"color: #ce9178;\">{tag:&#39;p&#39;,children:&#39;vdom&#39;}</span>]}</p><p><span style=\"color: #569cd6;font-weight: bold;\">###&nbsp;响应式原理</span></p><p>创建vue实例时，vue会遍历data选项的属性，然后利用object.defineProperty给属性添加setter、getter进行监控。当属性被改变是，会进行组件重新渲染</p><p><span style=\"color: #569cd6;font-weight: bold;\">#####&nbsp;object.defineProperty&nbsp;缺点</span></p><p>监听对象的时候&nbsp;-&nbsp;深度监听，需要遍历，计算量很大，无法监听新增、删除的属性。（只能用vue.set,&nbsp;vue.del设置）</p><p>无法监听数组&nbsp;-&nbsp;只能重新定义数组原型&nbsp;重写push，pop</p><p><br/></p><p><span style=\"color: #569cd6;font-weight: bold;\">###&nbsp;虚拟dom和diff</span></p><p>直接操作dom非常耗性能，所以使用js模拟dom结构</p><p><br/></p><p>diff算法</p><p>遍历tree1，遍历tree2，排序，数据量太大不可能&nbsp;O(n^3)</p><p>调整：</p><p>只对比统一同一级别的，tag不同的话直接删除重建，不做深度比较，tag和key，二者相同，则认为是相同节点，不做深度比较&nbsp;O(n)</p><p><br/></p><p><span style=\"color: #569cd6;font-weight: bold;\">###&nbsp;vue性能优化</span></p><p>合理使用v-if、v-show</p><p>v-for加key,避免与v-if同时使用</p><p>合理使用compunted</p><p>及时销毁自定义事件，避免内存泄露</p><p>合理使用异步组件</p><p>合理使用keep-alive</p><p>data层级不要太深，减少深度监控计算量</p><p><br/></p><p><span style=\"color: #569cd6;font-weight: bold;\">#####&nbsp;异步渲染</span></p><p>汇总data修改,一次性更新视图</p><p>较少修改dom次数，提高性能</p><p>$nextTick&nbsp;在dom更新后触发回调</p><p><br/></p><p>单词读熟&nbsp;题流畅&nbsp;看看以前的题&nbsp;还有一个原理没搞懂&nbsp;&nbsp;react了解&nbsp;webpack了解&nbsp;js面试题&nbsp;去做一些题</p><p><br/></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;路由守卫&nbsp;</span></p><p>beforeEach</p><p>beforeResolve</p><p>afterEach</p><p>beforeEnter</p><p>beforeRouteUpdate</p><p>分为三大类：全局守卫、路由守卫、组件守卫</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;v-show和v-if</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;v-for&nbsp;为什么用key</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;diff是什么</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;描述vue的生命周期</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;组件如何通信</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;描述组件渲染和更新过程</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;双向数据绑定&nbsp;model原理</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;mvvm</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;computed和watch的区别</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;为何组件data是一个函数</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;将组件的prop全部传给子组件</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;实现v-model</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;抽离相同组件</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;异步组件&nbsp;</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;使用keep-alive</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;beforeDestory</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;什么是作用域插槽&nbsp;slot</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;vuex</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;vue-router&nbsp;的路由模式</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;用vnode描述dom结构</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">###&nbsp;响应式原理</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">#####&nbsp;object-defineProperty&nbsp;缺点</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">###&nbsp;虚拟dom和diff</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">###&nbsp;vue性能优化</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">#####&nbsp;异步渲染</span></p><p><br/></p>",
        "type_url": "",
        "type": "笔记",
        "category": "笔记",
        "user_info_nick": "qyq",
        "user_info_cover": "//www.gravatar.com/avatar/6812bbadcf52b6ef6b5ad14f90f0be9c?s=200&r=pg&d=mm",
        "user_info_id": "5ef75a6299d6040b785444fc",
        "seo_title": "测试文章",
        "cover": "http://pic.ik123.com/uploads/allimg/170302/4-1F3021R533.jpg",
        "created": 1593778868655,
        "__v": 0
      },
      {
        "summary": "git总结",
        "tags": [
          "git"
        ],
        "is_private": false,
        "status": "draft",
        "read": 0,
        "praise": 0,
        "review": 0,
        "toped": false,
        "hotted": false,
        "weight": 0,
        "_id": "5eff230526890e0e74b84039",
        "title": "git 常见问题 命令",
        "content": "<p>安装 git&nbsp;</p><p>msysgit.github.io</p><p><br/></p><p>安装时</p><p>选择 Use git from git bash only.., 其他默认下一步</p><p><br/></p><p>配置git&nbsp;</p><p>&nbsp;git config --global user.name ‘qyq’</p><p>&nbsp;git config -- global user.email &quot;1611042821@qq.com&quot;</p><p><br/></p><p>搭建git服务器（远程服务）：统一的托管网站（https：//github.com）</p><p>为了本地和远程仓库之间进行免秘钥登录，可以配置ssh</p><p>$ ssh-keygen -t rsa -C 1611042821@qq.com 一路回车</p><p>$ cat ~/.ssh/id_rsa.pub 查找密匙</p><p>id_rsa.pub 添加但github -- settings -ssh 本地秘钥 仓库私钥</p><p><br/></p><p>测试连通性：</p><p>ssh -T git@github.com</p><p>成功后</p><p>会在.ssh下生成 known_hosts文件</p><p><br/></p><p>本地新建项目</p><p>git init</p><p><br/></p><p>github建立项目 项目 https://github.com/32152132a/blog.git</p><p>git remote add oragin https://github.com/32152132a/blog.git</p><p><br/></p><p>第一次发布项目 add - commit - push</p><p>git add .</p><p>git commit -m &#39;注释&#39;（默认master分支）</p><p><br/></p><p>git remote add origin git@github.com:32152132a/blog.git</p><p><br/></p><p>git push -u origin master</p><p><br/></p><p>git pull --rebase origin master&nbsp; 本地分支和仓库关联 生成本地md文件 也可手动</p><p>分支</p><p><br/></p><p>业务流程&nbsp;</p><p>创建项目-&gt; 配置ssh -&gt; clone -&gt; 创建分支 -&gt;&nbsp; add commit -&gt; push -&gt; pull -&gt; 通过 -&gt;&nbsp; 合并分支&nbsp;</p><p><br/></p><p>git branch 显示分支 git log 查看提交</p><p>git checkout -b &#39;&#39; 新建分支并换分支</p><p>get merge &#39;&#39; 合并分支</p><p>get status 查看状态</p><p>get reset &#39;&#39; 版本回调</p><p>git stash 暂存修改的代码 git stash pop 释放修改的代码</p><p><br/></p>",
        "type_url": "",
        "type": "笔记",
        "category": "笔记",
        "user_info_nick": "qyq",
        "user_info_cover": "//www.gravatar.com/avatar/6812bbadcf52b6ef6b5ad14f90f0be9c?s=200&r=pg&d=mm",
        "user_info_id": "5ef75a6299d6040b785444fc",
        "seo_title": "测试文章",
        "cover": "http://pic.ik123.com/uploads/allimg/170302/4-1F3021R538.jpg",
        "created": 1593778949311,
        "__v": 0
      },
      {
        "summary": "自己学习的时候尝试写无聊代码",
        "tags": [
          "js"
        ],
        "is_private": false,
        "status": "draft",
        "read": 0,
        "praise": 0,
        "review": 0,
        "toped": false,
        "hotted": false,
        "weight": 0,
        "_id": "5eff235f26890e0e74b8403a",
        "title": "js 无聊代码",
        "content": "<p><span style=\"color: #4ec9b0;\">console</span>.<span style=\"color: #dcdcaa;\">time</span>()</p><p><span style=\"color: #6a9955;\">//&nbsp;class&nbsp;Person&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;constructor(name)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;name</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;printName()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;this&nbsp;is&nbsp;printName&#39;)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;commonMethods()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;this&nbsp;is&nbsp;commonMethods&#39;)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;class&nbsp;Student&nbsp;extends&nbsp;Person&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;constructor(name,&nbsp;score)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(name)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.score&nbsp;=&nbsp;score</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;printScore()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;This&nbsp;is&nbsp;printScore&#39;)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;stu&nbsp;=&nbsp;new&nbsp;Student(&#39;小红&#39;)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;person&nbsp;=&nbsp;new&nbsp;Student(&#39;小紫&#39;)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(stu.commonMethods&nbsp;===&nbsp;person.commonMethods)</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;function&nbsp;fun(n,&nbsp;o)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(o)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;return&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fun:&nbsp;function&nbsp;(m)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;fun(m,&nbsp;n);</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;};</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;var&nbsp;a&nbsp;=&nbsp;fun(0);</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a.fun(1),&nbsp;a.fun(2),&nbsp;a.fun(3))</span></p><p><span style=\"color: #6a9955;\">//&nbsp;var&nbsp;b&nbsp;=&nbsp;fun(0).fun(1).fun(2).fun(3);&nbsp;//undefined,?,?,?</span></p><p><span style=\"color: #6a9955;\">//&nbsp;var&nbsp;c&nbsp;=&nbsp;fun(0).fun(1);</span></p><p><span style=\"color: #6a9955;\">//&nbsp;c.fun(2);</span></p><p><span style=\"color: #6a9955;\">//&nbsp;c.fun(3);&nbsp;//undefined,?,?,?</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;class&nbsp;people&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;constructor(name,&nbsp;sex)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;name</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.sex&nbsp;=&nbsp;sex</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;eat()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.name}${this.sex}`)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;class&nbsp;Stu1&nbsp;extends&nbsp;people&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;constructor(name,&nbsp;sex)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(name,&nbsp;sex)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;eat2()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.name}${this.sex}${this}`)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;class&nbsp;Stu2&nbsp;extends&nbsp;people&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;constructor(name,&nbsp;sex)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(name,&nbsp;sex)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;eat3()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.name}${this.sex}${this}`)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;new&nbsp;Stu1(&#39;haha&#39;,&nbsp;&#39;nan&#39;)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;b&nbsp;=&nbsp;new&nbsp;Stu2(&#39;xixi&#39;,&nbsp;&#39;nv&#39;)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(b)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(b.eat1)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(b.eat2)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(b.eat3())</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(b.name)</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;function&nbsp;Ab(e)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;setTimeout((e)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(e)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;},&nbsp;0,&nbsp;e)</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;5;&nbsp;i++)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;Ab(i)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(&#39;asd&#39;)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;Array.from({</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;length:&nbsp;5</span></p><p><span style=\"color: #6a9955;\">//&nbsp;},&nbsp;(e,&nbsp;i)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(i)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;return&nbsp;i</span></p><p><span style=\"color: #6a9955;\">//&nbsp;})</span></p><p><span style=\"color: #6a9955;\">//&nbsp;var&nbsp;arr7&nbsp;=&nbsp;Array.from(Array(100),&nbsp;(v,&nbsp;k)&nbsp;=&gt;&nbsp;k);</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log()</span></p><p><span style=\"color: #6a9955;\">//&nbsp;Array(10).forEach((e,&nbsp;i)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(e)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;})</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;[a,&nbsp;b]&nbsp;=&nbsp;[3,&nbsp;4];</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;c&nbsp;=&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;[a&nbsp;+&nbsp;b]:&nbsp;6</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;function&nbsp;d(a)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(arguments)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;d(1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a,&nbsp;b,&nbsp;c)</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(Object.prototype)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&#39;b&#39;:&nbsp;3,</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&quot;c&quot;:&nbsp;4,</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&#39;dd&#39;:&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;cc&quot;:&nbsp;5</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;b&nbsp;=&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&#39;d&#39;:&nbsp;3,</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&quot;c&quot;:&nbsp;4</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;c&nbsp;=&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;...a</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;a.dd.cc&nbsp;=&nbsp;100</span></p><p><span style=\"color: #6a9955;\">//&nbsp;a.c&nbsp;=&nbsp;100</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(c)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a)</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;function&nbsp;d(x,&nbsp;y&nbsp;=&nbsp;7,&nbsp;d,&nbsp;z&nbsp;=&nbsp;d&nbsp;+&nbsp;y,&nbsp;...num)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(arguments)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(num)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(x,&nbsp;y,&nbsp;z,&nbsp;d)&nbsp;NaN</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;d(1)</span></p><p><br/><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;aa:&nbsp;1,</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;bb:&nbsp;2,</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;cc:&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aaa:&nbsp;1,</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bbb:&nbsp;2,</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ccc:&nbsp;function&nbsp;()&nbsp;{},</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ddd:&nbsp;[],</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eee:&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aaaa:&nbsp;null,</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bbbb:&nbsp;new&nbsp;Date(),</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><br/><br/><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;a.cc.aaa&nbsp;=&nbsp;2</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;b&nbsp;=&nbsp;JSON.parse(JSON.stringify(a))</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(b)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a&nbsp;==&nbsp;b)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;[</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;[1,&nbsp;2,&nbsp;3,&nbsp;4],</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;[7,&nbsp;6,&nbsp;5,&nbsp;4],</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;[10,&nbsp;200,&nbsp;3,&nbsp;4],</span></p><p><span style=\"color: #6a9955;\">//&nbsp;]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(Array.from({</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;length:&nbsp;10</span></p><p><span style=\"color: #6a9955;\">//&nbsp;},&nbsp;(item,&nbsp;index)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;return&nbsp;index</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}))</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;function&nbsp;ajax(num)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Promise((resolve,&nbsp;reject)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(()&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(num)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(num)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;Math.random()&nbsp;*&nbsp;1000)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;})</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;ajax(0).then((res)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(res)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;return&nbsp;ajax(1)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}).then((res)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(res)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;return&nbsp;ajax(2)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}).then((res)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(res)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;return&nbsp;ajax(3)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;})</span></p><p><span style=\"color: #6a9955;\">//&nbsp;ajax(0).then((res)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(res)</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}).then((res)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ajax(res&nbsp;+&nbsp;1)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;})</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;.then((res)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(res)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;})</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;new&nbsp;Promise((resolve,&nbsp;reject)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;setTimeout(()&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve()</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;},&nbsp;2000)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;})</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;b&nbsp;=&nbsp;new&nbsp;Promise((resolve,&nbsp;reject)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;setTimeout(()&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(1)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;},&nbsp;100)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;})</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;c&nbsp;=&nbsp;new&nbsp;Promise((resolve,&nbsp;reject)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;setTimeout(()&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(3)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;},&nbsp;200)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;})</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;function&nbsp;test(bool)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;if&nbsp;(bool)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;Promise((resolve,&nbsp;reject)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(1)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Promise.resolve(42)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;test(0).then(value&nbsp;=&gt;&nbsp;console.log(value))</span></p><p><span style=\"color: #6a9955;\">//&nbsp;Promise.race([a,&nbsp;b,&nbsp;c]).then(value&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(value)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;})</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;c&nbsp;=&nbsp;{}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;3,&nbsp;c,&nbsp;c]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;b&nbsp;=&nbsp;new&nbsp;Set(a)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(b.keys())</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(b.values())</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(b.add(9))</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(b.add(10))</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(b.delete(4))</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log([...b])</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(b.entries())</span></p><p><span style=\"color: #6a9955;\">//&nbsp;for&nbsp;(let&nbsp;i&nbsp;of&nbsp;b)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(i)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;b&nbsp;=&nbsp;new&nbsp;Map(a)</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;new&nbsp;Map()</span></p><p><span style=\"color: #6a9955;\">//&nbsp;a.set(&#39;o&#39;,&nbsp;2221)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;a.set(&#39;os&#39;,&nbsp;22221)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;a.set(&#39;oo&#39;,&nbsp;222)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a.delete(&#39;o&#39;))</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a.keys())</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log([...a])</span></p><p><span style=\"color: #6a9955;\">//&nbsp;for&nbsp;(let&nbsp;[k,&nbsp;v]&nbsp;of&nbsp;a)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(k,&nbsp;v)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3,&nbsp;4,&nbsp;5,&nbsp;6,&nbsp;NaN,&nbsp;null,&nbsp;null,&nbsp;NaN,&nbsp;&#39;&#39;,&nbsp;&#39;&#39;,&nbsp;undefined,&nbsp;undefined]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;b&nbsp;=&nbsp;new&nbsp;Map()</span></p><p><span style=\"color: #6a9955;\">//&nbsp;for&nbsp;(let&nbsp;k&nbsp;of&nbsp;a)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;if&nbsp;(!b.has(k))&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b.set(k,&nbsp;true)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(b)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;function&nbsp;a()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;let&nbsp;c&nbsp;=&nbsp;&#39;ss&#39;</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(this)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;b&nbsp;=&nbsp;a;</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log()</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(Reflect.apply(Math.floor,&nbsp;null,&nbsp;[4.72]))</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(Reflect.apply(91&nbsp;&gt;&nbsp;100&nbsp;?&nbsp;Math.floor&nbsp;:&nbsp;Math.ceil,&nbsp;null,&nbsp;[21.4]))&nbsp;//&nbsp;this指向</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(Reflect.construct(Date,&nbsp;[]).getTime())&nbsp;//实例化类</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(new&nbsp;Date(1566920137917).toLocaleString())</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;const&nbsp;r&nbsp;=&nbsp;Object.defineProperty({},&nbsp;&#39;name&#39;,&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;value:&nbsp;&#39;Mike2&#39;</span></p><p><span style=\"color: #6a9955;\">//&nbsp;})</span></p><p><span style=\"color: #6a9955;\">//&nbsp;const&nbsp;r1&nbsp;=&nbsp;Reflect.defineProperty({},&nbsp;&#39;name&#39;,&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;value:&nbsp;&#39;Mike2&#39;</span></p><p><span style=\"color: #6a9955;\">//&nbsp;})</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(r,&nbsp;r1)</span></p><p><br/><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;class&nbsp;people&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;constructor(name)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;name</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;eat()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(`${this.name}&nbsp;eat`)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;get&nbsp;xx()&nbsp;{</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;`${this.name}&nbsp;xx`</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;set&nbsp;xx(aa)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(aa)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name&nbsp;=&nbsp;aa</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;class&nbsp;teacher&nbsp;extends&nbsp;people&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;constructor(name)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(name)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;eat2()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(`teacher&nbsp;eat`)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;new&nbsp;teacher(&#39;aaa&#39;)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;a.xx&nbsp;=&nbsp;&#39;asdds&#39;</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a)</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;b&nbsp;=&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;c:&nbsp;&#39;1&#39;,</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;c1:&nbsp;&#39;2&#39;,</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;c2:&nbsp;&#39;3&#39;,</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;c3:&nbsp;[4,&nbsp;5],</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;new&nbsp;Proxy(b,&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;get:&nbsp;function&nbsp;(target,&nbsp;prop)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(target,&nbsp;prop)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;},</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;set:&nbsp;function&nbsp;(target,&nbsp;prop)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(target,&nbsp;prop&nbsp;+&nbsp;&#39;set&#39;)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;})</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a.c)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;a.c&nbsp;=&nbsp;2</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(new&nbsp;Date())</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;new&nbsp;Date()</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a.getTime())</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(Date.now())</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(+a)</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;for&nbsp;(let&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;=&nbsp;100;&nbsp;i&nbsp;+=&nbsp;3)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(i.toString().padStart(2,&nbsp;0))</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(Proxy.flat({},&nbsp;{}))</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(new&nbsp;Proxy({},&nbsp;{}))</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;function*&nbsp;loop()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(333)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;for&nbsp;(let&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;5;&nbsp;i++)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;a&nbsp;=</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(yield&nbsp;[1,&nbsp;200])</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;l&nbsp;=&nbsp;loop()</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;list&nbsp;=&nbsp;[</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;[&#39;1A&#39;,&nbsp;&#39;1B&#39;,&nbsp;&#39;1C&#39;,&nbsp;&#39;1D&#39;,&nbsp;&#39;1E&#39;],</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;[&#39;2A&#39;,&nbsp;&#39;2B&#39;,&nbsp;&#39;2C&#39;,&nbsp;&#39;2D&#39;,&nbsp;&#39;2E&#39;,&nbsp;&#39;2F&#39;,&nbsp;&#39;2G&#39;],</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;[&#39;3A&#39;,&nbsp;&#39;3B&#39;,&nbsp;&#39;3C&#39;,&nbsp;&#39;3D&#39;,&nbsp;&#39;3E&#39;,&nbsp;&#39;3F&#39;,&nbsp;&#39;3G&#39;]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;lists&nbsp;=&nbsp;list.flat(2)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;function*&nbsp;draw(first&nbsp;=&nbsp;1,&nbsp;second&nbsp;=&nbsp;2,&nbsp;third&nbsp;=&nbsp;3)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;let&nbsp;Lucky&nbsp;=&nbsp;[]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;let&nbsp;num&nbsp;=&nbsp;[first,&nbsp;second,&nbsp;third]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;let&nbsp;count&nbsp;=&nbsp;0;</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;let&nbsp;random;</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;while&nbsp;(1)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(count&nbsp;&lt;&nbsp;first)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;random&nbsp;=&nbsp;Math.floor(Math.random()&nbsp;*&nbsp;lists.length)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yield&nbsp;lists[random]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(random)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lists.splice(random,&nbsp;1)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(count&nbsp;&lt;&nbsp;first&nbsp;+&nbsp;second)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;random&nbsp;=&nbsp;Math.floor(Math.random()&nbsp;*&nbsp;lists.length)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yield&nbsp;lists[random]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lists.splice(random,&nbsp;1)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if&nbsp;(count&nbsp;&lt;&nbsp;first&nbsp;+&nbsp;second&nbsp;+&nbsp;third)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;random&nbsp;=&nbsp;Math.floor(Math.random()&nbsp;*&nbsp;lists.length)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yield&nbsp;lists[random]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lists.splice(random,&nbsp;1)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;return&nbsp;Lucky</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;draw()</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a.next())</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a.next())</span></p><p><span style=\"color: #6a9955;\">//&nbsp;function*&nbsp;a()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;let&nbsp;arr&nbsp;=&nbsp;[1,&nbsp;1]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;while&nbsp;(1)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yield&nbsp;arr[arr.length&nbsp;-&nbsp;1]&nbsp;+&nbsp;arr[arr.length&nbsp;-&nbsp;2],</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr.push(arr[arr.length&nbsp;-&nbsp;1]&nbsp;+&nbsp;arr[arr.length&nbsp;-&nbsp;2])</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;b&nbsp;=&nbsp;a()</span></p><p><span style=\"color: #6a9955;\">//&nbsp;for&nbsp;(let&nbsp;n&nbsp;of&nbsp;b)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;if&nbsp;(n&nbsp;&gt;&nbsp;1000)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(n)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;list&nbsp;=&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;first:&nbsp;[&#39;1A&#39;,&nbsp;&#39;1B&#39;,&nbsp;&#39;1C&#39;,&nbsp;&#39;1D&#39;,&nbsp;&#39;1E&#39;],</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;second:&nbsp;[&#39;2A&#39;,&nbsp;&#39;2B&#39;,&nbsp;&#39;2C&#39;,&nbsp;&#39;2D&#39;,&nbsp;&#39;2E&#39;,&nbsp;&#39;2F&#39;,&nbsp;&#39;2G&#39;],</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;third:&nbsp;[&#39;3A&#39;,&nbsp;&#39;3B&#39;,&nbsp;&#39;3C&#39;,&nbsp;&#39;3D&#39;,&nbsp;&#39;3E&#39;,&nbsp;&#39;3F&#39;,&nbsp;&#39;3G&#39;]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;list[Symbol.iterator]&nbsp;=&nbsp;function&nbsp;()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;let&nbsp;keys&nbsp;=&nbsp;Object.keys(list)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;let&nbsp;values&nbsp;=&nbsp;[]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;return&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!values.length)&nbsp;{</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(keys.length)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;values&nbsp;=&nbsp;list[keys[0]]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keys.shift()</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done:&nbsp;!values.length,</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value:&nbsp;values.shift()</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;for&nbsp;(let&nbsp;n&nbsp;of&nbsp;list)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(n)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;list[Symbol.iterator]&nbsp;=&nbsp;function*&nbsp;()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;let&nbsp;keys&nbsp;=&nbsp;Object.keys(list)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;let&nbsp;values&nbsp;=&nbsp;[]</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;while&nbsp;(1)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!values.length)&nbsp;{</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(keys.length)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;values&nbsp;=&nbsp;list[keys[0]]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keys.shift()</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yield&nbsp;values.shift()</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yield&nbsp;values.shift()</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;for&nbsp;(let&nbsp;n&nbsp;of&nbsp;list)&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.log(n)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><br/></p><p><span style=\"color: #569cd6;\">function</span>&nbsp;<span style=\"color: #dcdcaa;\">takeLongTime</span>(<span style=\"color: #9cdcfe;\">n</span>)&nbsp;{</p><p>&nbsp;&nbsp;<span style=\"color: #c586c0;\">return</span>&nbsp;<span style=\"color: #569cd6;\">new</span>&nbsp;<span style=\"color: #4ec9b0;\">Promise</span>(<span style=\"color: #9cdcfe;\">resolve</span>&nbsp;<span style=\"color: #569cd6;\">=&gt;</span>&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #dcdcaa;\">setTimeout</span>(()&nbsp;<span style=\"color: #569cd6;\">=&gt;</span>&nbsp;<span style=\"color: #dcdcaa;\">resolve</span>(<span style=\"color: #9cdcfe;\">n</span>&nbsp;+&nbsp;<span style=\"color: #b5cea8;\">200</span>),&nbsp;<span style=\"color: #9cdcfe;\">n</span>);</p><p>&nbsp;&nbsp;});</p><p>}</p><p><br/></p><p><span style=\"color: #569cd6;\">function</span>&nbsp;<span style=\"color: #dcdcaa;\">step1</span>(<span style=\"color: #9cdcfe;\">n</span>)&nbsp;{</p><p>&nbsp;&nbsp;<span style=\"color: #4ec9b0;\">console</span>.<span style=\"color: #dcdcaa;\">log</span>(<span style=\"color: #ce9178;\">`step1&nbsp;with&nbsp;</span><span style=\"color: #569cd6;\">${</span><span style=\"color: #9cdcfe;\">n</span><span style=\"color: #569cd6;\">}</span><span style=\"color: #ce9178;\">`</span>);</p><p>&nbsp;&nbsp;<span style=\"color: #4ec9b0;\">console</span>.<span style=\"color: #dcdcaa;\">log</span>(<span style=\"color: #dcdcaa;\">takeLongTime</span>(<span style=\"color: #9cdcfe;\">n</span>))</p><p>&nbsp;&nbsp;<span style=\"color: #c586c0;\">return</span>&nbsp;<span style=\"color: #dcdcaa;\">takeLongTime</span>(<span style=\"color: #9cdcfe;\">n</span>);</p><p>}</p><p><br/></p><p><span style=\"color: #569cd6;\">function</span>&nbsp;<span style=\"color: #dcdcaa;\">step2</span>(<span style=\"color: #9cdcfe;\">n</span>)&nbsp;{</p><p>&nbsp;&nbsp;<span style=\"color: #4ec9b0;\">console</span>.<span style=\"color: #dcdcaa;\">log</span>(<span style=\"color: #ce9178;\">`step2&nbsp;with&nbsp;</span><span style=\"color: #569cd6;\">${</span><span style=\"color: #9cdcfe;\">n</span><span style=\"color: #569cd6;\">}</span><span style=\"color: #ce9178;\">`</span>);</p><p>&nbsp;&nbsp;<span style=\"color: #c586c0;\">return</span>&nbsp;<span style=\"color: #dcdcaa;\">takeLongTime</span>(<span style=\"color: #9cdcfe;\">n</span>);</p><p>}</p><p><br/></p><p><span style=\"color: #569cd6;\">function</span>&nbsp;<span style=\"color: #dcdcaa;\">step3</span>(<span style=\"color: #9cdcfe;\">n</span>)&nbsp;{</p><p>&nbsp;&nbsp;<span style=\"color: #4ec9b0;\">console</span>.<span style=\"color: #dcdcaa;\">log</span>(<span style=\"color: #ce9178;\">`step3&nbsp;with&nbsp;</span><span style=\"color: #569cd6;\">${</span><span style=\"color: #9cdcfe;\">n</span><span style=\"color: #569cd6;\">}</span><span style=\"color: #ce9178;\">`</span>);</p><p>&nbsp;&nbsp;<span style=\"color: #c586c0;\">return</span>&nbsp;<span style=\"color: #dcdcaa;\">takeLongTime</span>(<span style=\"color: #9cdcfe;\">n</span>);</p><p>}</p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;function&nbsp;dolt()&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;console.time(&quot;doIt&quot;);</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;const&nbsp;time1&nbsp;=&nbsp;300;</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;step1(time1)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.then(time2&nbsp;=&gt;&nbsp;step2(time2))</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.then(time3&nbsp;=&gt;&nbsp;step3(time3))</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.then(result&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(`result&nbsp;is&nbsp;${result}`);</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.timeEnd(&quot;doIt&quot;);</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #569cd6;\">async</span>&nbsp;<span style=\"color: #569cd6;\">function</span>&nbsp;<span style=\"color: #dcdcaa;\">dolt</span>()&nbsp;{</p><p>&nbsp;&nbsp;<span style=\"color: #569cd6;\">const</span>&nbsp;<span style=\"color: #4fc1ff;\">time1</span>&nbsp;=&nbsp;<span style=\"color: #b5cea8;\">300</span>;</p><p>&nbsp;&nbsp;<span style=\"color: #569cd6;\">const</span>&nbsp;<span style=\"color: #4fc1ff;\">time2</span>&nbsp;=&nbsp;<span style=\"color: #c586c0;\">await</span>&nbsp;<span style=\"color: #dcdcaa;\">step1</span>(<span style=\"color: #9cdcfe;\">time1</span>).<span style=\"color: #dcdcaa;\">then</span>(<span style=\"color: #9cdcfe;\">res</span>&nbsp;<span style=\"color: #569cd6;\">=&gt;</span>&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #4ec9b0;\">console</span>.<span style=\"color: #dcdcaa;\">log</span>(<span style=\"color: #9cdcfe;\">res</span>&nbsp;+&nbsp;<span style=\"color: #ce9178;\">&quot;sdasda&quot;</span>)</p><p>&nbsp;&nbsp;})</p><p>&nbsp;&nbsp;<span style=\"color: #4ec9b0;\">console</span>.<span style=\"color: #dcdcaa;\">log</span>(<span style=\"color: #9cdcfe;\">step1</span>)</p><p>&nbsp;&nbsp;<span style=\"color: #4ec9b0;\">console</span>.<span style=\"color: #dcdcaa;\">log</span>(<span style=\"color: #dcdcaa;\">step1</span>())</p><p>&nbsp;&nbsp;<span style=\"color: #4ec9b0;\">console</span>.<span style=\"color: #dcdcaa;\">log</span>(<span style=\"color: #9cdcfe;\">time2</span>)</p><p>&nbsp;&nbsp;<span style=\"color: #569cd6;\">const</span>&nbsp;<span style=\"color: #4fc1ff;\">time3</span>&nbsp;=&nbsp;<span style=\"color: #c586c0;\">await</span>&nbsp;<span style=\"color: #dcdcaa;\">step2</span>(<span style=\"color: #9cdcfe;\">time2</span>);</p><p>&nbsp;&nbsp;<span style=\"color: #569cd6;\">const</span>&nbsp;<span style=\"color: #4fc1ff;\">result</span>&nbsp;=&nbsp;<span style=\"color: #c586c0;\">await</span>&nbsp;<span style=\"color: #dcdcaa;\">step3</span>(<span style=\"color: #9cdcfe;\">time3</span>);</p><p>}</p><p><span style=\"color: #dcdcaa;\">dolt</span>();</p><p><span style=\"color: #6a9955;\">//&nbsp;const&nbsp;object1&nbsp;=&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;a:&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d:&nbsp;100</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;},</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;b:&nbsp;2,</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;c:&nbsp;3</span></p><p><span style=\"color: #6a9955;\">//&nbsp;};</span></p><p><span style=\"color: #6a9955;\">//&nbsp;const&nbsp;object2&nbsp;=&nbsp;Object.entries(object1)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;const&nbsp;object3&nbsp;=&nbsp;Object.fromEntries(object2)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(object1&nbsp;==&nbsp;object3)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;object1.a.d&nbsp;=&nbsp;6</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(object1)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(object2)</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(object3)</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(Array.from({</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;length:&nbsp;100</span></p><p><span style=\"color: #6a9955;\">//&nbsp;},&nbsp;(item,&nbsp;value)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;return&nbsp;value</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}))</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log([...new&nbsp;Array(100).keys()])</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;[1,&nbsp;3,&nbsp;4,&nbsp;2,&nbsp;5,&nbsp;6,&nbsp;4,&nbsp;7,&nbsp;5]</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.log(a.sort((k1,&nbsp;k2)&nbsp;=&gt;&nbsp;{</span></p><p><span style=\"color: #6a9955;\">//&nbsp;&nbsp;&nbsp;return&nbsp;k1&nbsp;-&nbsp;k2</span></p><p><span style=\"color: #6a9955;\">//&nbsp;}))</span></p><p><span style=\"color: #6a9955;\">//&nbsp;let&nbsp;a&nbsp;=&nbsp;[1,&nbsp;3,&nbsp;4,&nbsp;2,&nbsp;5,&nbsp;6,&nbsp;4,&nbsp;7,&nbsp;5]</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;function&nbsp;sort(Array)&nbsp;{</span></p><p><br/></p><p><span style=\"color: #6a9955;\">//&nbsp;}</span></p><p><span style=\"color: #6a9955;\">//&nbsp;console.timeEnd()</span></p><p><span style=\"color: #4ec9b0;\">console</span>.<span style=\"color: #dcdcaa;\">timeEnd</span>()</p><p><br/></p>",
        "type_url": "",
        "type": "笔记",
        "category": "笔记",
        "user_info_nick": "qyq",
        "user_info_cover": "//www.gravatar.com/avatar/6812bbadcf52b6ef6b5ad14f90f0be9c?s=200&r=pg&d=mm",
        "user_info_id": "5ef75a6299d6040b785444fc",
        "seo_title": "",
        "cover": "http://pic.ik123.com/uploads/allimg/170302/4-1F3021R538.jpg",
        "created": 1593779039063,
        "__v": 0
      },
      {
        "summary": "css布局",
        "tags": [
          "css3"
        ],
        "is_private": false,
        "status": "draft",
        "read": 0,
        "praise": 0,
        "review": 0,
        "toped": false,
        "hotted": false,
        "weight": 0,
        "_id": "5f016b3b620bee17783719c9",
        "title": "css 布局",
        "content": "<h1 class=\"postTitle\" style=\"margin: 20px 0px 0px; padding: 0px 0px 20px 5px; font-size: 15.6px; float: left; line-height: 1.5em; width: 1139.8px; clear: both; border-bottom: 1px solid rgb(221, 221, 221); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(238, 238, 238);\"><a id=\"cb_post_title_url\" class=\"postTitle2 vertical-middle\" href=\"https://www.cnblogs.com/asand/p/7417934.html\" style=\"margin: 0px; padding: 2px 0px 10px 50px; color: rgb(68, 68, 68); text-decoration-line: none; background: url(&quot;images/titlebg.png&quot;) no-repeat;\"><span style=\"margin: 0px; padding: 0px; vertical-align: middle;\">CSS的flex布局和Grid布局</span></a></h1><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">一、什么是 flex 布局</strong>　</p><p style=\"margin: 10px auto; padding: 0px;\">　　2009年，W3C 提出了一种新的方案----Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p><p style=\"margin: 10px auto; padding: 0px;\">Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性。</p><p style=\"margin: 10px auto; padding: 0px;\">　　flex 是一种新型的布局方式，使用该布局方式可以实现几乎所有你想要的效果。但是要注意其浏览器的兼容性，flex 只支持 ie 10+，所有还是要根据你的项目情况使用（没错，我们要求至少 ie 9）。</p><p style=\"margin: 10px auto; padding: 0px;\"><img src=\"https://images2017.cnblogs.com/blog/1187862/201708/1187862-20170823134826183-41472496.png\" alt=\"\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">二、使用flex</strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">　　</strong>flex 的使用方法很简单，只需要将其 父元素<code style=\"margin: 0px; padding: 0px;\">display</code>&nbsp;属性设置为&nbsp;<code style=\"margin: 0px; padding: 0px;\">flex</code>&nbsp;就可以，也可以设置行内的 flex，记得 Webkit 内核的浏览器，必须加上&nbsp;<code style=\"margin: 0px; padding: 0px;\">-webkit</code>&nbsp;前缀。</p><p style=\"margin: 10px auto; padding: 0px;\">　　<strong style=\"margin: 0px; padding: 0px;\">注意 :&nbsp;</strong>设为 Flex 布局以后，子元素的&nbsp;<code style=\"margin: 0px; padding: 0px;\">float</code>、<code style=\"margin: 0px; padding: 0px;\">clear</code>&nbsp;和&nbsp;<code style=\"margin: 0px; padding: 0px;\">vertical-align</code>&nbsp;属性将失效。</p><p style=\"margin: 10px auto; padding: 0px;\"><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px;\">　　.ele{</span></p><p style=\"margin: 10px auto; padding: 0px;\"><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px;\">　　　　<span class=\"hljs-attribute\" style=\"margin: 0px; padding: 0px; color: rgb(163, 21, 21);\">display: -webkit-flex;</span></span></p><p style=\"margin: 10px auto; padding: 0px;\"><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-attribute\" style=\"margin: 0px; padding: 0px; color: rgb(163, 21, 21);\">　　　　<span class=\"hljs-attribute\" style=\"margin: 0px; padding: 0px;\">display: flex;</span></span></span></p><p style=\"margin: 10px auto; padding: 0px;\"><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-attribute\" style=\"margin: 0px; padding: 0px; color: rgb(163, 21, 21);\"><span class=\"hljs-attribute\" style=\"margin: 0px; padding: 0px;\">　　　　<span class=\"hljs-attribute\" style=\"margin: 0px; padding: 0px;\">display: inline-flex;</span></span></span></span></p><p style=\"margin: 10px auto; padding: 0px;\"><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-attribute\" style=\"margin: 0px; padding: 0px; color: rgb(163, 21, 21);\"><span class=\"hljs-attribute\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-attribute\" style=\"margin: 0px; padding: 0px;\">　　　　<span class=\"hljs-attribute\" style=\"margin: 0px; padding: 0px;\">display: -webkit-inline-flex;</span></span></span></span></span></p><p style=\"margin: 10px auto; padding: 0px;\"><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-attribute\" style=\"margin: 0px; padding: 0px; color: rgb(163, 21, 21);\">　　}</span></span></p><p style=\"margin: 10px auto; padding: 0px;\"><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-attribute\" style=\"margin: 0px; padding: 0px; color: rgb(163, 21, 21);\">　　在 flex 中，最核心的概念就是容器和轴，所有的属性都是围绕容器和轴设置的。其中，容器分为父容器和子容器。轴分为主轴和交叉轴（主轴默认为水平方向，方向向右，交叉轴为主轴顺时针旋转 90°）。</span></span></p><p style=\"margin: 10px auto; padding: 0px;\"><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-attribute\" style=\"margin: 0px; padding: 0px; color: rgb(163, 21, 21);\">　　在使用 flex 的元素中，默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）<br style=\"margin: 0px; padding: 0px;\"/>　　主轴开始的位置称为&nbsp;<code style=\"margin: 0px; padding: 0px;\">main start</code>，主轴结束的位置称为&nbsp;<code style=\"margin: 0px; padding: 0px;\">main end</code>。<br style=\"margin: 0px; padding: 0px;\"/>　　同理，交叉轴开始的位置称为&nbsp;<code style=\"margin: 0px; padding: 0px;\">cross start</code>，交叉轴结束的位置称为&nbsp;<code style=\"margin: 0px; padding: 0px;\">cross end</code>。<br style=\"margin: 0px; padding: 0px;\"/>　　在使用 flex 的子元素中，占据的主轴空间叫做&nbsp;<code style=\"margin: 0px; padding: 0px;\">main size</code>，占据的交叉轴空间叫做&nbsp;<code style=\"margin: 0px; padding: 0px;\">cross size</code>。</span></span></p><p style=\"margin: 10px auto; padding: 0px;\"><span class=\"hljs-selector-class\" style=\"margin: 0px; padding: 0px;\"><span class=\"hljs-attribute\" style=\"margin: 0px; padding: 0px; color: rgb(163, 21, 21);\">　　　　<img src=\"https://images2017.cnblogs.com/blog/1187862/201708/1187862-20170823135313011-1156901175.png\" alt=\"\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/></span></span></p><h3 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 16px; line-height: 1.5;\">父容器属性</h3><p style=\"margin: 10px auto; padding: 0px;\">父容器上有六个属性</p><ul style=\"margin-left: 30px; padding: 0px; word-break: break-all;\" class=\" list-paddingleft-2\"><li><p><span style=\"margin: 0px; padding: 0px; font-size: 18px;\"><a href=\"https://juejin.im/post/599970f4518825243a78b9d5#flex-direction\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">flex-direction：主轴的方向。</a></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; font-size: 18px;\"><a href=\"https://link.juejin.im/?target=flex-wrap\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">flex-wrap：超出父容器自容器的排列样式。</a></span></p></li><li><p><span style=\"margin: 0px; padding: 0px; font-size: 18px;\">flex-flow：<code style=\"margin: 0px; padding: 0px;\">flex-direction</code>&nbsp;属性和&nbsp;<code style=\"margin: 0px; padding: 0px;\">flex-wrap</code>&nbsp;属性的简写形式。</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; font-size: 18px;\">justify-content：子容器在主轴的排列方向。</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; font-size: 18px;\">align-items：子容器在交叉轴的排列方向。</span></p></li><li><p><span style=\"margin: 0px; padding: 0px; font-size: 18px;\"><span style=\"margin: 0px; padding: 0px;\">align-content：多根轴线的对齐方式。</span></span></p><h4 id=\"-span-id-flex-direction-flex-direction-span-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\"><span id=\"flex-direction\" style=\"margin: 0px; padding: 0px;\">1.flex-direction 属性</span></h4><p style=\"margin: 10px auto; padding: 0px;\">flex-direction 属性决定主轴的方向（主轴的方向不一定是水平的，这个属性就是设置主轴的方向，主轴默认是水平方向，从左至右，如果主轴方向设置完毕，那么交叉轴就不需要设置，交叉轴永远是主轴顺时针旋转 90°）。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">.ele&nbsp;{&nbsp;&nbsp;flex-direction:&nbsp;row;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;默认值，主轴为水平方向，起点在左端。&nbsp;&nbsp;flex-direction:&nbsp;row-reverse;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;主轴为水平方向，起点在右端。&nbsp;&nbsp;flex-direction:&nbsp;column;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;主轴为垂直方向，起点在上。&nbsp;&nbsp;flex-direction:&nbsp;column-reverse;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;主轴为垂直方向，起点在下。}</pre></li><li><h4 id=\"-span-id-flex-wrap-flex-wrap-span-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\"><span id=\"flex-wrap\" style=\"margin: 0px; padding: 0px;\">flex-wrap 属性</span></h4><p style=\"margin: 10px auto; padding: 0px;\"><code style=\"margin: 0px; padding: 0px;\">flex-wrap</code>&nbsp;属性决定子容器如果在一条轴线排不下时，如何换行。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">.ele&nbsp;{&nbsp;flex-wrap:&nbsp;nowrap;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;默认，不换行&nbsp;flex-wrap:&nbsp;wrap;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;换行，第一行在上方。&nbsp;flex-wrap:&nbsp;wrap-reverse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;换行，第一行在下方。</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">flex-wrap&nbsp;属性</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h4 id=\"justify-content-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">justify-content 属性</h4><p style=\"margin: 10px auto; padding: 0px;\"><code style=\"margin: 0px; padding: 0px;\">justify-content</code>&nbsp;属性定义了子容器在主轴上的对齐方式。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">.ele{&nbsp;&nbsp;&nbsp;&nbsp;justify-content:&nbsp;flex-start;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;默认，左对齐&nbsp;&nbsp;&nbsp;&nbsp;justify-content:&nbsp;flex-end;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;右对齐&nbsp;&nbsp;&nbsp;&nbsp;justify-content:&nbsp;center;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;居中&nbsp;&nbsp;&nbsp;&nbsp;justify-content:&nbsp;space-between;&nbsp;&nbsp;&nbsp;//&nbsp;两端对齐，项目之间的间隔都相等。&nbsp;&nbsp;&nbsp;&nbsp;justify-content:&nbsp;space-around;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n}</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">justify-content&nbsp;属性</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h4 id=\"flex-flow-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">flex-flow 属性</h4><p style=\"margin: 10px auto; padding: 0px;\"><code style=\"margin: 0px; padding: 0px;\">flex-flow</code>&nbsp;属性是&nbsp;<code style=\"margin: 0px; padding: 0px;\">flex-direction</code>&nbsp;属性和&nbsp;<code style=\"margin: 0px; padding: 0px;\">flex-wrap</code>&nbsp;属性的简写形式，默认值为&nbsp;<code style=\"margin: 0px; padding: 0px;\">row nowrap</code>。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">.ele&nbsp;{&nbsp;&nbsp;flex-flow:&nbsp;&lt;flex-direction&gt;&nbsp;||&nbsp;&lt;flex-wrap&gt;;\n}</pre><h4 id=\"align-items-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">align-items 属性</h4><p style=\"margin: 10px auto; padding: 0px;\"><code style=\"margin: 0px; padding: 0px;\">align-items</code>属性定义自容器在交叉轴上如何对齐。<br style=\"margin: 0px; padding: 0px;\"/>具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">.ele{&nbsp;&nbsp;&nbsp;&nbsp;align-items:&nbsp;flex-start;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;交叉轴的起点对齐。&nbsp;&nbsp;&nbsp;&nbsp;align-items:&nbsp;flex-end;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;交叉轴的终点对齐。&nbsp;&nbsp;&nbsp;&nbsp;align-items:&nbsp;center;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;交叉轴的中点对齐。&nbsp;&nbsp;&nbsp;&nbsp;align-items:&nbsp;baseline;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;项目的第一行文字的基线对齐。&nbsp;&nbsp;&nbsp;&nbsp;align-items:&nbsp;stretch;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;默认，如果项目未设置高度或设为auto，将占满整个容器的高度。\n}</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">align-items&nbsp;属性</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h4 id=\"align-content-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">align-content 属性</h4><p style=\"margin: 10px auto; padding: 0px;\"><code style=\"margin: 0px; padding: 0px;\">align-content</code>&nbsp;属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">.ele{\n&nbsp;&nbsp;&nbsp;&nbsp;align-content:&nbsp;flex-start;&nbsp;&nbsp;&nbsp;//&nbsp;与交叉轴的起点对齐\n&nbsp;&nbsp;&nbsp;&nbsp;align-content;&nbsp;flex-end;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;与交叉轴的终点对齐。\n&nbsp;&nbsp;&nbsp;&nbsp;align-content:&nbsp;center;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;与交叉轴的中点对齐。\n&nbsp;&nbsp;&nbsp;&nbsp;align-content:&nbsp;space-between;//&nbsp;与交叉轴两端对齐，轴线之间的间隔平均分布。\n&nbsp;&nbsp;&nbsp;&nbsp;align-content:&nbsp;space-around;&nbsp;//&nbsp;每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n&nbsp;&nbsp;&nbsp;&nbsp;align-content:&nbsp;stretch;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;默认&nbsp;轴线占满整个交叉轴。\n}</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">align-content&nbsp;属性</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h3 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 16px; line-height: 1.5;\">子容器属性</h3><p style=\"margin: 10px auto; padding: 0px;\">子容器也有 6 个属性：</p><h4 id=\"order-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">order 属性</h4><p style=\"margin: 10px auto; padding: 0px;\"><code style=\"margin: 0px; padding: 0px;\">order</code>&nbsp;属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">.ele{&nbsp;&nbsp;&nbsp;order:&nbsp;num;&nbsp;\n}</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">order&nbsp;属性</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h4 id=\"flex-grow-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">flex-grow 属性</h4><p style=\"margin: 10px auto; padding: 0px;\"><code style=\"margin: 0px; padding: 0px;\">flex-grow</code>&nbsp;属性定义子容器的伸缩比例。按照该比例给子容器分配空间。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">.ele{&nbsp;&nbsp;&nbsp;&nbsp;flex-grow:&nbsp;&lt;number&gt;;&nbsp;/*&nbsp;default&nbsp;0&nbsp;*/}</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">flex-grow&nbsp;属性</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h4 id=\"flex-shrink-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">flex-shrink 属性</h4><p style=\"margin: 10px auto; padding: 0px;\"><code style=\"margin: 0px; padding: 0px;\">flex-shrink</code>&nbsp;属性定义了子容器弹性收缩的比例。如图，超出的部分按 1:2 的比例从给子容器中减去。此属性要生效，父容器的&nbsp;<code style=\"margin: 0px; padding: 0px;\">flex-wrap</code>&nbsp;属性要设置为&nbsp;<code style=\"margin: 0px; padding: 0px;\">nowrap</code></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">.ele{&nbsp;&nbsp;&nbsp;&nbsp;flex-shrink:&nbsp;&lt;number&gt;;&nbsp;/*&nbsp;default&nbsp;0&nbsp;*/}</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">flex-shrink&nbsp;属性</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h4 id=\"flex-basis-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">flex-basis 属性</h4><p style=\"margin: 10px auto; padding: 0px;\"><code style=\"margin: 0px; padding: 0px;\">flex-basis</code>&nbsp;属性定义了自容器在不伸缩情况下的原始尺寸，主轴为横向时代表宽度，主轴为纵向时代表高度。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">.ele{&nbsp;&nbsp;&nbsp;&nbsp;flex-basis:&nbsp;&lt;length&gt;&nbsp;|&nbsp;auto;&nbsp;/*&nbsp;default&nbsp;auto&nbsp;*/}</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">flex-basis&nbsp;属性</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h4 id=\"flex-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">flex 属性</h4><p style=\"margin: 10px auto; padding: 0px;\">子元素的&nbsp;<code style=\"margin: 0px; padding: 0px;\">flex</code>&nbsp;属性是&nbsp;<code style=\"margin: 0px; padding: 0px;\">flex-grow</code>,<code style=\"margin: 0px; padding: 0px;\">flex-shrink</code>&nbsp;和&nbsp;<code style=\"margin: 0px; padding: 0px;\">flex-basis</code>&nbsp;的简写，默认值为&nbsp;<code style=\"margin: 0px; padding: 0px;\">0</code>&nbsp;<code style=\"margin: 0px; padding: 0px;\">1</code><code style=\"margin: 0px; padding: 0px;\">auto</code>。后两个属性可选。</p><p style=\"margin: 10px auto; padding: 0px;\">该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p><h4 id=\"align-self-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">align-self 属性</h4><p style=\"margin: 10px auto; padding: 0px;\">子容器的&nbsp;<code style=\"margin: 0px; padding: 0px;\">align-self</code>&nbsp;属性允许单个项目有与其他项目不一样的对齐方式，可覆盖父容器&nbsp;<code style=\"margin: 0px; padding: 0px;\">align-items</code>&nbsp;属性。默认值为&nbsp;<code style=\"margin: 0px; padding: 0px;\">auto</code>，表示继承父元素的&nbsp;<code style=\"margin: 0px; padding: 0px;\">align-items</code>属性，如果没有父元素，则等同于&nbsp;<code style=\"margin: 0px; padding: 0px;\">stretch</code>。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">.ele{&nbsp;&nbsp;&nbsp;&nbsp;align-self:&nbsp;auto;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;继承父元素的&nbsp;align-items&nbsp;属性&nbsp;&nbsp;&nbsp;&nbsp;align-self:&nbsp;flex-start;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;交叉轴的起点对齐。&nbsp;&nbsp;&nbsp;&nbsp;align-self:&nbsp;flex-end;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;交叉轴的终点对齐。&nbsp;&nbsp;&nbsp;&nbsp;align-self:&nbsp;center;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;交叉轴的中点对齐。&nbsp;&nbsp;&nbsp;&nbsp;align-self:&nbsp;baseline;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;项目的第一行文字的基线对齐。&nbsp;&nbsp;&nbsp;&nbsp;align-self:&nbsp;stretch;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;默认，如果项目未设置高度或设为auto，将占满整个容器的高度。\n}</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\"><br/></pre></li><ul style=\"list-style-type: square;\" class=\" list-paddingleft-2\"><li><p>order：子容器的排列顺序</p></li><li><p>flex-grow：子容器剩余空间的拉伸比例</p></li><li><p>flex-shrink：子容器超出空间的压缩比例</p></li><li><p>flex-basis：自容器在不伸缩情况下的原始尺寸</p></li><li><p>flex：子元素的&nbsp;<code style=\"margin: 0px; padding: 0px;\">flex</code>&nbsp;属性是&nbsp;<code style=\"margin: 0px; padding: 0px;\">flex-grow</code>,<code style=\"margin: 0px; padding: 0px;\">flex-shrink</code>&nbsp;和&nbsp;<code style=\"margin: 0px; padding: 0px;\">flex-basis</code>&nbsp;的简写</p></li><li><p>align-self</p></li></ul></ul><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">&nbsp;三、grid 网格布局</strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">　　</strong>grid 布局又称为“网格布局”，可以实现二维布局方式，和之前的 表格<code style=\"margin: 0px; padding: 0px;\">table</code>布局差不多，然而，这是使用 CSS 控制的，不是使用 HTML 控制的，同时还可以依赖于媒体查询根据不同的上下文得新定义布局。和&nbsp;<code style=\"margin: 0px; padding: 0px;\">table</code>&nbsp;布局不同的是，<code style=\"margin: 0px; padding: 0px;\">grid</code>&nbsp;布局不需要在 HTML 中使用特定的标签布局，所有的布局都是在 CSS 中完成的，你可以随意定义你的 grid 网格。</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp; &nbsp; &nbsp;&nbsp;<strong style=\"margin: 0px; padding: 0px;\">grid 网格布局中的基本概念</strong></p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;　　网格线(Grid Lines) : 网格线组成了网格，他是网格的水平和垂直的分界线。一个网格线存在行或列的两侧。我们可以引用它的数目或者定义的网格线名称。</p><p style=\"margin: 10px auto; padding: 0px;\"><img src=\"https://images2017.cnblogs.com/blog/1187862/201708/1187862-20170823141312011-522251840.png\" alt=\"\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/></p><p style=\"margin: 10px auto; padding: 0px;\">　　<strong style=\"margin: 0px; padding: 0px;\">网格轨道(Grid Track) ：</strong>&nbsp;网格轨道是就是相邻两条网格线之间的空间，就好比表格中行或列。所在在网格中其分为grid column和grid row。每个网格轨道可以设置一个大小，用来控制宽度或高度。</p><p style=\"margin: 10px auto; padding: 0px;\"><img src=\"https://images2017.cnblogs.com/blog/1187862/201708/1187862-20170823141415277-1876899154.png\" alt=\"\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/></p><h6 id=\"-grid-cell-\" style=\"margin: 10px 0px; padding: 0px; font-size: 11px;\">　　网格单元格(Grid Cell) ：<span style=\"margin: 0px; padding: 0px; font-size: 14px;\">网格单元格是指四条网格线之间的空间。所以它是最小的单位，就像表格中的单元格。</span></h6><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\"><img src=\"https://images2017.cnblogs.com/blog/1187862/201708/1187862-20170823141549839-1957008424.png\" alt=\"\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/></span></p><h3 id=\"-grid-area-\" style=\"margin: 10px 0px; padding: 0px; font-size: 16px; line-height: 1.5;\">网格区域(Grid Area)：网格区域是由任意四条网格线组成的空间，所以他可能包含一个或多个单元格。相当于表格中的合并单元格之后的区域。</h3><p style=\"margin: 10px auto; padding: 0px;\"><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/d2e76b9a3878f766d976d060152087a5?imageView2/0/w/1280/h/960\" alt=\"网格区域(Grid Area)\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">四 &nbsp;使用 grid 布局</strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">　　</strong>使用 grid 布局很简单，通过display属性设置属性值为 grid 或 inline-grid 或者是 subgrid（该元素父元素为网格，继承父元素的行和列的大小） 就可以了。</p><p style=\"margin: 10px auto; padding: 0px;\">网格容器中的所有子元素就会自动变成网格项目（grid item），然后设置列（grid-template-columns）和 行（grid-template-rows）的大小，设置&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-template-columns</code>&nbsp;有多少个参数生成的 grid 列表就有多少个列。</p><p style=\"margin: 10px auto; padding: 0px;\">注：当元素设置了网格布局，column、float、clear、vertical-align属性无效。</p><p style=\"margin: 10px auto; padding: 0px;\">如果没有设置&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-template-columns</code>，那么默认只有一列，宽度为父元素的 100%，例如</p><p style=\"margin: 10px auto; padding: 0px;\">比如我们设置如下的 HTML，</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&lt;div&nbsp;class=&quot;grid-container&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;item1&quot;&gt;1&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;item2&quot;&gt;2&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;item3&quot;&gt;3&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;item4&quot;&gt;4&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;item5&quot;&gt;5&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;item6&quot;&gt;6&lt;/div&gt;&lt;/div&gt;</pre><p style=\"margin: 10px auto; padding: 0px;\">在 CSS 中，我们不设置&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-template-columns</code>，只设置&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-template-row</code></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.grid-container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;grid;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-rows:&nbsp;50px&nbsp;80px&nbsp;100px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.item{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border:&nbsp;2px&nbsp;solid&nbsp;palegoldenrod;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#fff;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;20px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">显示如下</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/0b6f92930f17f283e7c97eba2497d55a?imageView2/0/w/1280/h/960\" alt=\"不设置 grid-template-columns\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>不设置 grid-template-columns</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">设置了&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-template-columns</code>&nbsp;的话，设置了几个参数，就有几列（不超过 grid item 的个数），然后设置的&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-template-row</code>&nbsp;参数就是每一列的高度（超出列数的高度无效）</p><p style=\"margin: 10px auto; padding: 0px;\">比如：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.grid-container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;20px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;grid;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-rows:&nbsp;50px&nbsp;100px&nbsp;60px&nbsp;80px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-columns:&nbsp;50px&nbsp;40px&nbsp;100px&nbsp;80px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.item{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border:&nbsp;2px&nbsp;solid&nbsp;palegoldenrod;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#fff;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">虽然我们设置了四个&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-template-rows</code>，但是因为只有两行，所以只有前两个值生效。效果如下：</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/21f7b2a8ffec994e6e4e56983f5c60bf?imageView2/0/w/1280/h/960\" alt=\"设置 grid-template-columns\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>设置 grid-template-columns</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">当然，我们也可以像 flex 一样设置每一列的宽度：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.grid-container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;20px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;grid;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-rows:&nbsp;50px&nbsp;100px&nbsp;60px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-columns:&nbsp;1fr&nbsp;1fr&nbsp;2fr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">注意到我们使用了一个新的单位：<code style=\"margin: 0px; padding: 0px;\">fr</code></p><blockquote style=\"margin: 10px 0px; padding: 5px 10px; background: url(&quot;images/comment.gif&quot;) 25px 0px no-repeat; border: 2px solid rgb(239, 239, 239); min-height: 35px; line-height: 1.6em; color: rgb(51, 51, 51);\"><p style=\"margin: 10px auto; padding: 0px;\">css fr 单位是一个自适应单位，fr单位被用于在一系列长度值中分配剩余空间，如果多个已指定了多个部分，则剩下的空间根据各自的数字按比例分配。</p></blockquote><p style=\"margin: 10px auto; padding: 0px;\">tips：fr 是基于网格容器可用空间来计算的（flex 也是一样），所以我们可以和其他单位混合使用，如果需要的话</p><p style=\"margin: 10px auto; padding: 0px;\">是不是找到了 flex 的感觉，这样设置效果如下：</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/be393b8ce9267ae2e0001cb4d457681c?imageView2/0/w/1280/h/960\" alt=\"使用 fr 按比例设置宽度\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>使用 fr 按比例设置宽度</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h2 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">行或列最小和最大尺寸</h2><p style=\"margin: 10px auto; padding: 0px;\"><code style=\"margin: 0px; padding: 0px;\">minmax()</code>&nbsp;函数来创建行或列的最小或最大尺寸，第一个参数定义网格轨道的最小值，第二个参数定义网格轨道的最大值。可以接受任何长度值，也接受&nbsp;<code style=\"margin: 0px; padding: 0px;\">auto</code>&nbsp;值。<code style=\"margin: 0px; padding: 0px;\">auto</code>&nbsp;值允许网格轨道基于内容的尺寸拉伸或挤压。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.grid-container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;20px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;grid;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-rows:&nbsp;minmax(100px,200px)&nbsp;minmax(50px,200px);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-columns:&nbsp;1fr&nbsp;1fr&nbsp;2fr;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;300px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">我们将第一行的高度设置为&nbsp;<code style=\"margin: 0px; padding: 0px;\">minmax(100px,200px)</code>，第二行的高度设置为<code style=\"margin: 0px; padding: 0px;\">minmax(50px,200px)</code>，容器总高度设置为&nbsp;<code style=\"margin: 0px; padding: 0px;\">300px</code>，这时每一列的高度要怎么算呢？</p><p style=\"margin: 10px auto; padding: 0px;\">先判断总高度是小于第一列高度的最大值和第二列高度的最大值之和的，如果大于最大值之和，那么第一列和第二列的高度都为设置的最大值，如果是小于最小值之和的话，那么第一列和第二列的高度都为设置的最小值。</p><p style=\"margin: 10px auto; padding: 0px;\">现在问题来了，我们这种情况是总高度是小于第一列高度的最大值和第二列高度的最大值之和的，这样就是先用 总高度&nbsp;<code style=\"margin: 0px; padding: 0px;\">300px</code>&nbsp;- 第一列最小高度&nbsp;<code style=\"margin: 0px; padding: 0px;\">100px</code>&nbsp;- 第二列最小高度&nbsp;<code style=\"margin: 0px; padding: 0px;\">50px</code>&nbsp;=&nbsp;<code style=\"margin: 0px; padding: 0px;\">150px</code>。<br style=\"margin: 0px; padding: 0px;\"/>第一列高度：第一列最小高度&nbsp;<code style=\"margin: 0px; padding: 0px;\">100px</code>&nbsp;+&nbsp;<code style=\"margin: 0px; padding: 0px;\">150px/2</code>&nbsp;=&nbsp;<code style=\"margin: 0px; padding: 0px;\">175px</code>;<br style=\"margin: 0px; padding: 0px;\"/>第二列高度：第一列最小高度&nbsp;<code style=\"margin: 0px; padding: 0px;\">50px</code>&nbsp;+&nbsp;<code style=\"margin: 0px; padding: 0px;\">150px/2</code>&nbsp;=&nbsp;<code style=\"margin: 0px; padding: 0px;\">125px</code>;</p><p style=\"margin: 10px auto; padding: 0px;\">效果如下：</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/77446497022ddff4294ba277dbeee225?imageView2/0/w/1280/h/960\" alt=\"最小和最大尺寸设置\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>最小和最大尺寸设置</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h2 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">重复行或者列</h2><p style=\"margin: 10px auto; padding: 0px;\"><code style=\"margin: 0px; padding: 0px;\">repeat()</code>&nbsp;属性可以创建重复的网格轨道。这个适用于创建相等尺寸的网格项目和多个网格项目。</p><p style=\"margin: 10px auto; padding: 0px;\"><code style=\"margin: 0px; padding: 0px;\">repeat()</code>&nbsp;也接受两个参数：第一个参数定义网格轨道应该重复的次数，第二个参数定义每个轨道的尺寸。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.grid-container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;20px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;grid;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-columns:&nbsp;repeat(2,100px);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-rows:&nbsp;repeat(3,100px);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">效果如下：</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/a437f5a1f6759f37b1abd2b5b58cd18c?imageView2/0/w/1280/h/960\" alt=\"repeat()\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>repeat()</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h2 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">间距</h2><p style=\"margin: 10px auto; padding: 0px;\"><code style=\"margin: 0px; padding: 0px;\">grid-column-gap</code>：创建列与列之间的距离。<br style=\"margin: 0px; padding: 0px;\"/><code style=\"margin: 0px; padding: 0px;\">grid-row-gap</code>：行与行之间的距离。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.grid-container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;20px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;grid;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-columns:&nbsp;repeat(2,100px);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-rows:&nbsp;repeat(3,100px);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-column-gap:&nbsp;50px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-row-gap:&nbsp;15px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/72bdd4dda24e729abdc96785162d76ec?imageView2/0/w/1280/h/960\" alt=\"设置间距\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>设置间距</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">或者使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-gap</code>&nbsp;是&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-row-gap</code>&nbsp;和&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-column-gap</code>两个属性的缩写。</p><h2 id=\"-grid-item\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">通过网格线定位 grid item</h2><p style=\"margin: 10px auto; padding: 0px;\">我们可以通过表格线行或者列来定位 grid item。比如：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&lt;div&nbsp;class=&quot;grid-container&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;item1&quot;&gt;1&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;item2&quot;&gt;2&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;item3&quot;&gt;3&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;item4&quot;&gt;4&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;item5&quot;&gt;5&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;item6&quot;&gt;6&lt;/div&gt;&lt;/div&gt;</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.grid-container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;20px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;grid;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-columns:&nbsp;repeat(2,100px);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-rows:&nbsp;repeat(3,100px);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-column-gap:&nbsp;50px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-row-gap:&nbsp;15px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.item{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border:&nbsp;2px&nbsp;solid&nbsp;palegoldenrod;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#fff;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;20px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.item1{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-row-start:&nbsp;2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-row-end:&nbsp;3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-column-start:&nbsp;2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-column-end:&nbsp;3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;#fffa90;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#000;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">效果：</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/326b7e1856e61524c26322e510271c95?imageView2/0/w/1280/h/960\" alt=\"通过网格线定位 grid item\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>通过网格线定位 grid item</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\"><code style=\"margin: 0px; padding: 0px;\">grid-row</code>&nbsp;是&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-row-start</code>&nbsp;和&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-row-end</code>&nbsp;的简写。<code style=\"margin: 0px; padding: 0px;\">grid-column</code>&nbsp;是&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-column-start</code>&nbsp;和&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-column-end</code>&nbsp;的简写。</p><p style=\"margin: 10px auto; padding: 0px;\">如果只提供一个值，指定了&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-row-start</code>&nbsp;和&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-column-start</code>&nbsp;的值。</p><p style=\"margin: 10px auto; padding: 0px;\">如果提供两个值，第一个值是&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-row-start</code>&nbsp;或者&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-column-start</code>&nbsp;的值，第二个值是&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-row-end</code>&nbsp;或者&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-column-end</code>&nbsp;的值，两者之间必须要用/隔开。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;grid-row:&nbsp;2;&nbsp;\n&nbsp;&nbsp;&nbsp;grid-column:&nbsp;3&nbsp;/&nbsp;4;</pre><p style=\"margin: 10px auto; padding: 0px;\">这四个值可以用&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-area</code>&nbsp;缩写，分别对应&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-row-start</code>、<code style=\"margin: 0px; padding: 0px;\">grid-column-start</code>、<code style=\"margin: 0px; padding: 0px;\">grid-row-end</code>、<code style=\"margin: 0px; padding: 0px;\">grid-column-end</code>：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;grid-area:&nbsp;2&nbsp;/&nbsp;2&nbsp;/&nbsp;3&nbsp;/&nbsp;3;</pre><h2 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">合并单元行与合并单元列</h2><p style=\"margin: 10px auto; padding: 0px;\">这个就和 excel 中的合并单元行/列是相同的（这个需要设置在 grid item 中），</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;grid-column-start:&nbsp;1;&nbsp;&nbsp;&nbsp;&nbsp;grid-column-end:&nbsp;3;&nbsp;&nbsp;&nbsp;&nbsp;grid-row-start:&nbsp;2;&nbsp;&nbsp;&nbsp;&nbsp;grid-row-end:&nbsp;4;&nbsp;&nbsp;&nbsp;&nbsp;grid-row-end:&nbsp;4;</pre><p style=\"margin: 10px auto; padding: 0px;\">也可以使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-row</code>&nbsp;和&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-column</code>&nbsp;简写的形式，关键词&nbsp;<code style=\"margin: 0px; padding: 0px;\">span</code>&nbsp;后面紧随数字，表示合并多少个列或行，<code style=\"margin: 0px; padding: 0px;\">/</code>&nbsp;前面是从第几行/列开始。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;grid-row:&nbsp;2&nbsp;/&nbsp;span&nbsp;3;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;grid-column:&nbsp;span&nbsp;2;</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.grid-container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;20px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;grid;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-columns:&nbsp;repeat(4,100px);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-rows:&nbsp;repeat(3,100px);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-column-gap:&nbsp;50px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-row-gap:&nbsp;15px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.item{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border:&nbsp;2px&nbsp;solid&nbsp;palegoldenrod;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#fff;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;20px;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.item1{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-column-start:&nbsp;1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-column-end:&nbsp;3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-row-start:&nbsp;2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-row-end:&nbsp;4;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">效果如图：</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/7b94bc787ab1af8e2abba584d97136f8?imageView2/0/w/1280/h/960\" alt=\"合并单元行与合并单元列\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>合并单元行与合并单元列</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h2 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">自定义网格线名称</h2><p style=\"margin: 10px auto; padding: 0px;\">在 grid 中，是可以自定义网格线的名称的，然后使用定义好的网格线来进行布局，<code style=\"margin: 0px; padding: 0px;\">[col1-start]</code>&nbsp;网格线名称一定要使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">[]</code>&nbsp;括住。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&lt;div&nbsp;class=&quot;grid-container&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;a&quot;&gt;a&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;b&quot;&gt;b&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;c&quot;&gt;c&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;d&quot;&gt;d&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;e&quot;&gt;e&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;f&quot;&gt;f&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;g&quot;&gt;g&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;h&quot;&gt;h&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;i&quot;&gt;i&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;item&nbsp;j&quot;&gt;j&lt;/div&gt;&lt;/div&gt;</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.grid-container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;400px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;100px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;grid;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-column-gap:&nbsp;5px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-row-gap:&nbsp;5px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-columns:&nbsp;[col1-start]&nbsp;100px&nbsp;[col1-end]&nbsp;5px&nbsp;[col2-start]&nbsp;100px&nbsp;[col2-end]&nbsp;5px&nbsp;[col3-start]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;100px&nbsp;[col3-end]&nbsp;5px&nbsp;[col4-start]&nbsp;100px&nbsp;[col4-end];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-rows:&nbsp;[row1-start]&nbsp;auto&nbsp;[row1-end]&nbsp;5px&nbsp;[row2-start]&nbsp;auto&nbsp;[row2-end]&nbsp;5px&nbsp;[row3-start]&nbsp;auto\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[row3-end]&nbsp;5px&nbsp;[row4-start]&nbsp;auto&nbsp;[row4-end]&nbsp;5px&nbsp;[row5-start]&nbsp;auto&nbsp;[row5-end];\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.a&nbsp;{&nbsp;grid-column:&nbsp;col1-start&nbsp;/&nbsp;col3-end;&nbsp;grid-row:&nbsp;row1-start;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;#ffffff;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.b&nbsp;{&nbsp;grid-column:&nbsp;col4-start&nbsp;/&nbsp;col4-end;&nbsp;grid-row:&nbsp;row1-start&nbsp;/&nbsp;row5-end;&nbsp;background:&nbsp;orange;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.c&nbsp;{&nbsp;grid-column:&nbsp;col1-start;&nbsp;grid-row:&nbsp;row2-start;&nbsp;background:&nbsp;#ffffff;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.d&nbsp;{&nbsp;grid-column:&nbsp;col2-start;&nbsp;grid-row:&nbsp;row2-start;&nbsp;background:&nbsp;#ffffff;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.e&nbsp;{&nbsp;grid-column:&nbsp;col3-start;&nbsp;grid-row:&nbsp;row2-start;&nbsp;background:&nbsp;#ffffff;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.f&nbsp;{&nbsp;grid-column:&nbsp;col1-start&nbsp;/&nbsp;col2-end;&nbsp;grid-row:&nbsp;row3-start;&nbsp;background:&nbsp;#ffffff;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.g&nbsp;{&nbsp;grid-column:&nbsp;col3-start;&nbsp;grid-row:&nbsp;row3-start;&nbsp;background:&nbsp;#ffffff;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.h&nbsp;{&nbsp;grid-column:&nbsp;col1-start;&nbsp;grid-row:&nbsp;row4-start;&nbsp;background:&nbsp;#ffffff;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.i&nbsp;{&nbsp;grid-column:&nbsp;col2-start&nbsp;/&nbsp;col3-end;&nbsp;grid-row:&nbsp;row4-start;&nbsp;background:&nbsp;#ffffff;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.j&nbsp;{&nbsp;grid-column:&nbsp;col1-start&nbsp;/&nbsp;col3-end;&nbsp;grid-row:&nbsp;row5-start;&nbsp;background:&nbsp;#ffffff;}</pre><p style=\"margin: 10px auto; padding: 0px;\">最后的显示效果是这样的（文字和辅助线是后台添加的）：</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/0aaa209d325e7f0c68b37b071be73df0?imageView2/0/w/1280/h/960\" alt=\"自定义网格线名称\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>自定义网格线名称</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h2 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">通过网格区域命名和定位网格项目</h2><h3 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 16px; line-height: 1.5;\">什么是网格区域：</h3><blockquote style=\"margin: 10px 0px; padding: 5px 10px; background: url(&quot;images/comment.gif&quot;) 25px 0px no-repeat; border: 2px solid rgb(239, 239, 239); min-height: 35px; line-height: 1.6em; color: rgb(51, 51, 51);\"><p style=\"margin: 10px auto; padding: 0px;\">网格区域(grid-area)是一个逻辑空间，主要用来放置一个或多个网格单元格（Grid Cell）。他是由四条网格线(Grid line)，网格区域每边一条，四边相交组织的网格轨道(Grid Track)。简单点理解，网格区域是有四条网格线交织组成的网格空间，这个空间中可能是一个网格单元格，也可能是多个网格单元格。</p></blockquote><h3 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 16px; line-height: 1.5;\">定义网格区域</h3><p style=\"margin: 10px auto; padding: 0px;\">在CSS Grid Layout中定义网格区域有两种方式，一种是通过网格线来定义，另一种是通过grid-template-areas来定义。接下来看看两种定义网格区域的方法在具体使用过程中有何不同。</p><h3 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 16px; line-height: 1.5;\">网格线定义网格区域</h3><p style=\"margin: 10px auto; padding: 0px;\">使用网格线定义网格区域的方法非常的简单，首先依赖于&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-template-columns</code>&nbsp;和&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-template-rows</code>&nbsp;显式定义网格线，甚至是由浏览器隐式创建网格线，然后通过&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-area</code>&nbsp;属性通过取网格线，组成网格线交织区域，那么这个区域就是所讲的网格区域。在使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-area</code>&nbsp;属性调用网格线，其遵循的规则是&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-area: row-start</code>/&nbsp;<code style=\"margin: 0px; padding: 0px;\">column-start</code>&nbsp;/&nbsp;<code style=\"margin: 0px; padding: 0px;\">row-end</code>&nbsp;/&nbsp;<code style=\"margin: 0px; padding: 0px;\">column-end</code>。</p><h3 id=\"-grid-template-areas-\" style=\"margin: 10px 0px; padding: 0px; font-size: 16px; line-height: 1.5;\"><code style=\"margin: 0px; padding: 0px;\">grid-template-areas</code>&nbsp;定义网格区域</h3><p style=\"margin: 10px auto; padding: 0px;\">除了使用网格线的交组来定义网格区域之外，在 CSS Grid Layout 中还可以通过&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-template-areas</code>&nbsp;属性来定义网格区域的名称，然后需要放在对应网格区域的元素，可以通过&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-area</code>&nbsp;属性来指定。而且重复区域可以使用同一个名称来实现跨区域。另外对于空的轨道区域，可以使用点号&nbsp;<code style=\"margin: 0px; padding: 0px;\">.</code>&nbsp;来代表</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&lt;div&nbsp;class=&quot;grid-container&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;header&nbsp;&quot;&gt;header&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;content&nbsp;&quot;&gt;content&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;sidebar&nbsp;&quot;&gt;sidebar&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;footer&nbsp;&quot;&gt;footer&lt;/div&gt;&lt;/div&gt;</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.grid-container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;20px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;grid;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-column-gap:&nbsp;5px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-row-gap:&nbsp;5px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-areas:&nbsp;&quot;header&nbsp;header&nbsp;header&nbsp;header&nbsp;header&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sidebar&nbsp;content&nbsp;content&nbsp;content&nbsp;content&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;footer&nbsp;footer&nbsp;footer&nbsp;footer&nbsp;footer&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-rows:&nbsp;50px&nbsp;150px&nbsp;50px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-columns:&nbsp;200px&nbsp;200px&nbsp;200px;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.header&nbsp;{&nbsp;grid-area:header;&nbsp;background:&nbsp;#fff}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.content&nbsp;{&nbsp;grid-area:&nbsp;content;&nbsp;background:&nbsp;#fffa90}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.sidebar&nbsp;{&nbsp;grid-area:&nbsp;sidebar;&nbsp;background:&nbsp;#5bc0de}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.footer&nbsp;{&nbsp;grid-area:&nbsp;footer;&nbsp;background:&nbsp;#ffff00}</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/0b45387b08f3a1fc55f7fc29fd38ebd4?imageView2/0/w/1280/h/960\" alt=\"grid-template-areas 定义网格区域\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>grid-template-areas 定义网格区域</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">我发现这样布局的一个优点，在不设置高度的情况下（父容器和&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-template-rows</code>&nbsp;的值，或者&nbsp;<code style=\"margin: 0px; padding: 0px;\">grid-template-rows</code>&nbsp;设置为&nbsp;<code style=\"margin: 0px; padding: 0px;\">auto</code>&nbsp;时，<code style=\"margin: 0px; padding: 0px;\">slider</code>&nbsp;和&nbsp;<code style=\"margin: 0px; padding: 0px;\">content</code>&nbsp;的高度是一致的，并且会根据其内的高度自适应）</p><p style=\"margin: 10px auto; padding: 0px;\">例如：</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/4c8a876364205f37368a57e378746b5f?imageView2/0/w/1280/h/960\" alt=\"不设置高度使高度自适应\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>不设置高度使高度自适应</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h1 id=\"-css-\" style=\"margin: 10px 0px; padding: 0px; font-size: 28px; line-height: 1.5;\">常用的 CSS 布局</h1><p style=\"margin: 10px auto; padding: 0px;\">在介绍了 CSS 的布局方式之后，我们来看一下常用的 CSS 布局有哪些</p><h2 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">水平垂直居中（感觉总结的并不是很好）</h2><p style=\"margin: 10px auto; padding: 0px;\">感觉垂直居中真的是已经被讲烂了，但是在平时做项目时，我都是靠试的，导致面试的时候被问到有时候回答不上来，现在就用自己的方式来总结一下。其实这个方式是有很多的，但就是看的教程太多了，导致最后一个都没有记住，所以我决定尽可能的将情况考虑完整，然后每一种情况只记住一个最佳实践。</p><p style=\"margin: 10px auto; padding: 0px;\">对于居中，我个人认为不需要背什么“x 种方式实现 xx”这样的例子，我们只需要了解其原理即可写出符合要求的 css。</p><p style=\"margin: 10px auto; padding: 0px;\">水平、垂直居中，个人比较喜欢用绝对定位的方法实现，其次就是使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">table</code>&nbsp;布局，因为自带垂直居中。如果是单行的行内元素使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">line-height</code>&nbsp;等于&nbsp;<code style=\"margin: 0px; padding: 0px;\">height</code>，对于多行元素的垂直居中，大部分都是使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">table</code>&nbsp;元素（求推荐更好的布局），当然还有 flex 和 grid 布局。</p><h3 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 16px; line-height: 1.5;\">水平居中</h3><p style=\"margin: 10px auto; padding: 0px;\">一般水平居中还是比较容易的，我一般都是先看子元素是固定宽度还是宽度未知</p><h4 id=\"-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">固定宽度</h4><p style=\"margin: 10px auto; padding: 0px;\">这种方式是绝对定位居中，除了使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">margin</code>，我们还可以使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">transform</code>（注意浏览器兼容性，只适用于 ie9+，移动开发请忽略）</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;300px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;relative;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.inner{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;50px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;absolute;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top:&nbsp;50%;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left:&nbsp;50%;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin-top:&nbsp;-25px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin-left:&nbsp;-50px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;#fff;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;300px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;relative;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.inner{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;50px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;absolute;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top:&nbsp;50%;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left:&nbsp;50%;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform:&nbsp;translate(-50%,&nbsp;-50%);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;#fff;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">或者使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">magin:0 auto</code>；但一般情况下我都会使用上一种，因为习惯了(ಥ_ಥ)</p><h4 id=\"-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">宽度未知</h4><p style=\"margin: 10px auto; padding: 0px;\">将子元素设置为行内元素，然后父元素设置&nbsp;<code style=\"margin: 0px; padding: 0px;\">text-align: center</code>。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;300px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;relative;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.inner{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;inline-block;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h4 id=\"-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">多个块状元素</h4><p style=\"margin: 10px auto; padding: 0px;\">上面的方式即使子元素不止一个也想实现水平居中也是有效的，（宽度固定不固定都可，不固定的话就不需要设置宽度，会被自动撑开，但是要考虑到撑爆的情况）例如：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;250px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;relative;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;20px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.inner{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;inline-block;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;50px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;150px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;0&nbsp;auto;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;#fff;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/666841916ea971f4705b439282c86658?imageView2/0/w/1280/h/960\" alt=\"多个子元素水平居中\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>多个子元素水平居中</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">当然也可以使用我们刚刚介绍的 flex，我们只需要让子元素在主轴上的对齐方式设置为居中就可以</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;250px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;flex;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;justify-content:&nbsp;center;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;20px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.inner{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;#fff;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;50px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;150px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin-left:&nbsp;10px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h3 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 16px; line-height: 1.5;\">垂直居中</h3><h4 id=\"-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">单行行内元素</h4><p style=\"margin: 10px auto; padding: 0px;\">单行海内元素居中，只需要将子元素的行高等于高度就可以了。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#container&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;400px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#inner{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;inline-block;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line-height:&nbsp;200px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><h4 id=\"-\" style=\"margin: 10px 0px; padding: 0px; color: rgb(51, 51, 51);\">多行元素</h4><p style=\"margin: 10px auto; padding: 0px;\">上面的这种方式只能处理单行的行内元素，对于多行的行内元素是处理不了的，因为给每一个子元素都设置了&nbsp;<code style=\"margin: 0px; padding: 0px;\">line-height</code>，看了很多方法，要不是没有效果，要不然就是又局限性，提到最多的是使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">table-cell</code>&nbsp;的方式（但是貌似这个方法也有一点弊端，那就是其子元素的表现形式和行内元素类似，子元素不能独占一行），当然如果你有更好的方式，欢迎提出：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.container&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;400px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;absolute;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;table;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertical-align:middle;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.inner{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;table-cell;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertical-align:middle;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">还有一个方法是设置一个空的行内元素，使其&nbsp;<code style=\"margin: 0px; padding: 0px;\">height:100%</code>，<code style=\"margin: 0px; padding: 0px;\">display:inline-block</code>,<code style=\"margin: 0px; padding: 0px;\">vertical-align: middle;</code>&nbsp;并且&nbsp;<code style=\"margin: 0px; padding: 0px;\">font-size:0</code>。但是这样方式的原理我还不是很清楚，只是知道要设置一个空元素，高度和父元素相等，并且设置垂直居中的属性。但是，这只是用与所有的行内元素的宽度和不超过父元素的宽度的情况。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&lt;div&nbsp;class=&quot;container&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;img&nbsp;src=&quot;WechatIMG110.jpg&quot;&nbsp;width=&quot;50px&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;img&nbsp;src=&quot;WechatIMG110.jpg&quot;&nbsp;width=&quot;50px&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;img&nbsp;src=&quot;WechatIMG110.jpg&quot;&nbsp;width=&quot;50px&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;123&lt;/p&gt;&lt;/div&gt;</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;400px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertical-align:&nbsp;middle;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;inline-block;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100%;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line-height:&nbsp;100%;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertical-align:&nbsp;middle;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">效果：</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/732fedf7ebd5eeb817f9a522bbdff6ea?imageView2/0/w/1280/h/960\" alt=\"多行行内元素\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>多行行内元素<br style=\"margin: 0px; padding: 0px;\"/>另一个一劳永逸的方法就是 flex，但是要注意浏览器的兼容性。</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h2 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">图片和文字垂直居中</h2><p style=\"margin: 10px auto; padding: 0px;\">经常有看到设计稿是图片和文字垂直居中的，那么怎么才能让图片和文字垂直居中呢？<br style=\"margin: 0px; padding: 0px;\"/>只需要给图片一个&nbsp;<code style=\"margin: 0px; padding: 0px;\">vertical-align: middle;</code>&nbsp;属性就可以：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&lt;div&nbsp;class=&quot;container&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;img&nbsp;src=&quot;WechatIMG110.jpg&quot;&nbsp;height=&quot;260&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;123456&lt;/p&gt;&lt;/div&gt;</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.container&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;pink;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;20px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;400px;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.container&nbsp;img{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;inline-block;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertical-align:&nbsp;middle;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.container&nbsp;p{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;inline-block;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">效果如下：</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/88386947f106680912f2b889917891a6?imageView2/0/w/1280/h/960\" alt=\"图片和文字垂直居中\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>图片和文字垂直居中</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h2 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">重点来啦~</h2><p style=\"margin: 10px auto; padding: 0px;\">自我感觉总结的居中问题不是特别的好，我们现在可以来总结一下其中的原理：</p><ul style=\"margin-left: 30px; padding: 0px; word-break: break-all;\" class=\" list-paddingleft-2\"><li><p>我们要实现水平或者垂直居中，应该从两方面下手：元素自带居中的效果或者强制让其显示在中间。</p></li><li><p>所以我们先考虑，哪些元素有自带的居中效果，最先想到的应该就是&nbsp;<code style=\"margin: 0px; padding: 0px;\">text-align:center</code>了，但是这个只对行内元素有效，所以我们要使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">text-align:center</code>&nbsp;就必须将子元素设置为&nbsp;<code style=\"margin: 0px; padding: 0px;\">display: inline;</code>&nbsp;或者&nbsp;<code style=\"margin: 0px; padding: 0px;\">display: inline-block;</code>；</p></li><li><p>接下来我们可能会想既然有&nbsp;<code style=\"margin: 0px; padding: 0px;\">text-align</code>&nbsp;那么会不会对应也有自带垂直居中的呢，答案是有的&nbsp;<code style=\"margin: 0px; padding: 0px;\">vertical-align:</code>，我一直不是很喜欢使用这个属性，因为十次用，9.9 次都没有垂直居中，一度让我怀疑人生。现在貌似也搞得不是很清楚，看了&nbsp;<a href=\"https://link.juejin.im/?target=http%3A%2F%2Fwww.zhangxinxu.com%2Fwordpress%2F2010%2F05%2F%25E6%2588%2591%25E5%25AF%25B9css-vertical-align%25E7%259A%2584%25E4%25B8%2580%25E4%25BA%259B%25E7%2590%2586%25E8%25A7%25A3%25E4%25B8%258E%25E8%25AE%25A4%25E8%25AF%2586%25EF%25BC%2588%25E4%25B8%2580%25EF%25BC%2589%2F\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">张鑫旭的文章</a>&nbsp;居然看得也不是很懂，笑哭。目前就在&nbsp;<code style=\"margin: 0px; padding: 0px;\">table</code>&nbsp;中设置有效，因为&nbsp;<code style=\"margin: 0px; padding: 0px;\">table</code>&nbsp;元素 的特性，打娘胎里面带的就是好用。还有一种可以有效的方式是前面提到的空元素的方式，不过感觉多设置一个元素还不如使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">table</code>。</p></li><li><p>还有一只设置垂直居中的是将行内元素的&nbsp;<code style=\"margin: 0px; padding: 0px;\">line-height</code>&nbsp;和&nbsp;<code style=\"margin: 0px; padding: 0px;\">height</code>&nbsp;设置为相同（只适用于单行行内元素）</p></li><li><p>固定宽度或者固定高度的情况个人认为设置水平垂直居最简单，可以直接使用绝对定位。使用绝对定位就是子元素相对于父元素的位置，所以将父元素设置&nbsp;<code style=\"margin: 0px; padding: 0px;\">position:reletive</code>&nbsp;对应的子元素要设置&nbsp;<code style=\"margin: 0px; padding: 0px;\">position:absolute</code>，然后使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">top:50%;left:50%</code>，将子元素的左上角和父元素的中点对齐，之后再设置偏移&nbsp;<code style=\"margin: 0px; padding: 0px;\">margin-top: 1/2 子元素高度;margin-left: 1/2 子元素宽度;</code>。这种方式也很好理解。</p></li><li><p>上面的绝对定位方法只要将&nbsp;<code style=\"margin: 0px; padding: 0px;\">margin</code>&nbsp;改为&nbsp;<code style=\"margin: 0px; padding: 0px;\">transform</code>&nbsp;就可以实现宽度和高度未知的居中（兼容性啊兄弟们！(ಥ_ಥ)）<code style=\"margin: 0px; padding: 0px;\">transformX:50%;transformY:50%</code>；</p></li></ul><p style=\"margin: 10px auto; padding: 0px;\">不行，感觉总结的还是很渣，╮(╯▽╰)╭哎，谁有好的方法，求推荐。</p><h1 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 28px; line-height: 1.5;\">圣杯布局</h1><p style=\"margin: 10px auto; padding: 0px;\">其实我还真是第一次听说圣杯布局这种称呼，看了下这个名字的由来，貌似和布局并没有什么关系，圣杯布局倒是挺常见的三栏式布局。两边顶宽，中间自适应的三栏布局。<br style=\"margin: 0px; padding: 0px;\"/>效果如下：</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/00913c0a5f49e94f13dd4a0bf5eea826?imageView2/0/w/1280/h/960\" alt=\"圣杯布局\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>圣杯布局</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">这个布局方式的关键是怎么样才能使得在伸缩浏览器窗口的时候让中间的子元素宽度改变。可以适应浏览器的宽度变化使用百分比设置宽度再合适不过，所以我们要将中间子元素的宽度设置为&nbsp;<code style=\"margin: 0px; padding: 0px;\">100%</code>，左边和右边的子元素设置为固定的宽度。</p><p style=\"margin: 10px auto; padding: 0px;\">我们就来实现一下这样的布局：</p><h2 id=\"-html-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">给出HTML结构</h2><p style=\"margin: 10px auto; padding: 0px;\">HTML 文件就很普通：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&lt;div&nbsp;class=&quot;container&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;middle&quot;&gt;测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;left&quot;&gt;left&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;right&quot;&gt;right&lt;/div&gt;&lt;/div&gt;</pre><p style=\"margin: 10px auto; padding: 0px;\">这里我们要注意的是，中间栏要在放在文档流前面以优先渲染。</p><h2 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">给出每个子元素的样式</h2><p style=\"margin: 10px auto; padding: 0px;\">然后我们写 CSS，我们现将其三个元素的宽度和高度设置好，然后都设置为&nbsp;<code style=\"margin: 0px; padding: 0px;\">float:left</code>:</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.middle{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100%;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;paleturquoise;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float:&nbsp;left;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.left{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;palevioletred;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float:&nbsp;left;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;40px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#fff;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.right{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;purple;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;40px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float:&nbsp;left;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#fff;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">这时的效果如下：</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/42def5aa9d3b4df14c230506074b7ee0?imageView2/0/w/1280/h/960\" alt=\"圣杯布局\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>圣杯布局</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h2 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">使子元素在同一行显示</h2><p style=\"margin: 10px auto; padding: 0px;\">我们可以看出，现在三个子元素是在一排显示的，因为我们给中间的子元素设置的宽度是&nbsp;<code style=\"margin: 0px; padding: 0px;\">100%</code>，并且中间的子元素在文档流的最前面，最先被渲染。</p><p style=\"margin: 10px auto; padding: 0px;\">那么我们要使得三个元素在同一排显示。接下来我们要将&nbsp;<code style=\"margin: 0px; padding: 0px;\">.left</code>&nbsp;和&nbsp;<code style=\"margin: 0px; padding: 0px;\">.right</code>&nbsp;向上提。实际上我们是使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">margin-left</code>&nbsp;为 负值来实现的，我们将&nbsp;<code style=\"margin: 0px; padding: 0px;\">.left</code>&nbsp;的&nbsp;<code style=\"margin: 0px; padding: 0px;\">margin-left</code>&nbsp;设置为&nbsp;<code style=\"margin: 0px; padding: 0px;\">-100%</code>（负的中间子元素的宽度），这样，左边的元素就会被“提升”到上一层。</p><p style=\"margin: 10px auto; padding: 0px;\">然后就是右边子元素了，只需要设置&nbsp;<code style=\"margin: 0px; padding: 0px;\">margin-left</code>&nbsp;设置为负的自身的宽度。</p><p style=\"margin: 10px auto; padding: 0px;\">结果如下：</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/929b5b13e3a9396bc4b43c8daaf275c4?imageView2/0/w/1280/h/960\" alt=\"这里写图片描述\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>这里写图片描述</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h2 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">使得中间子元素不被遮盖</h2><p style=\"margin: 10px auto; padding: 0px;\">从上一张截图显示中显示中间的子元素被遮挡了，所以说我们要解决这个问题，要怎么解决呢？嗯... 只要使得中间的子元素显示的宽度刚好为左边元素和右边元素显示中间的宽度就可以。同时我们还必须保证是使用的半分比的布局方式。</p><p style=\"margin: 10px auto; padding: 0px;\">这样的话有一种方式可以即使中间的宽度减少，又可以使中间的宽度仍然使用&nbsp;<code style=\"margin: 0px; padding: 0px;\">100%</code>，那就是设置父元素的&nbsp;<code style=\"margin: 0px; padding: 0px;\">padding</code>&nbsp;值，将父元素的&nbsp;<code style=\"margin: 0px; padding: 0px;\">padding-left</code>&nbsp;设置为左边子元素的宽度，将父元素的&nbsp;<code style=\"margin: 0px; padding: 0px;\">padding-right</code>&nbsp;设置为右边子元素的宽度。</p><p style=\"margin: 10px auto; padding: 0px;\">显示效果如下：</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/f4fbde95e4aa19f9ac021138e0106fdf?imageView2/0/w/1280/h/960\" alt=\"圣杯布局\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>圣杯布局</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h2 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">将左边和右边的子元素像两边移动</h2><p style=\"margin: 10px auto; padding: 0px;\">嗯... 这貌似也不是我们想要的效果，但是，中间的子元素确实是在中间了，那么我们只需要设置相对位置，将左边的子元素和右边的子元素向两边移动就好。</p><p style=\"margin: 10px auto; padding: 0px;\">最终的 CSS 代码如下：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding:&nbsp;0&nbsp;200px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.middle{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100%;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;paleturquoise;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float:&nbsp;left;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.left{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;palevioletred;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float:&nbsp;left;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;40px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#fff;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin-left:-100%;\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.right{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;purple;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;40px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float:&nbsp;left;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#fff;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin-left:-200px;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">最终效果如下：</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/5cca9436df9669d9abebdf7f8fd49c94?imageView2/0/w/1280/h/960\" alt=\"圣杯布局\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>圣杯布局</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h1 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 28px; line-height: 1.5;\">双飞翼布局</h1><p style=\"margin: 10px auto; padding: 0px;\">其实双飞翼布局是为了解决圣杯布局的弊端提出的，如果你跟我一起将上面的圣杯布局的代码敲了一遍，你就会发现一个问题，当你将浏览器宽度缩短到一定程度的时候，会使得中间子元素的宽度比左右子元素宽度小的时候，这时候布局就会出现问题。所以首先，这提示了我们在使用圣杯布局的时候一定要设置整个容器的最小宽度。</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/f83bca0c0e71b7dfb497853f0f5035ad?imageView2/0/w/1280/h/960\" alt=\"圣杯布局弊端\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>圣杯布局弊端</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><h2 id=\"-\" style=\"margin: 10px 0px; padding: 0px; font-size: 21px; line-height: 1.5;\">双飞翼和圣杯布局区别</h2><blockquote style=\"margin: 10px 0px; padding: 5px 10px; background: url(&quot;images/comment.gif&quot;) 25px 0px no-repeat; border: 2px solid rgb(239, 239, 239); min-height: 35px; line-height: 1.6em; color: rgb(51, 51, 51);\"><p style=\"margin: 10px auto; padding: 0px;\">圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。</p><p style=\"margin: 10px auto; padding: 0px;\">不同在于解决”中间栏div内容不被遮挡“问题的思路不一样：圣杯布局，为了中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。</p><p style=\"margin: 10px auto; padding: 0px;\">双飞翼布局，为了中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该子div里用margin-left和margin-right为左右两栏div留出位置。</p><p style=\"margin: 10px auto; padding: 0px;\">作者：知乎用户<br style=\"margin: 0px; padding: 0px;\"/>链接：<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F21504052%2Fanswer%2F50053054\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">www.zhihu.com/question/21…</a><br style=\"margin: 0px; padding: 0px;\"/>来源：知乎<br style=\"margin: 0px; padding: 0px;\"/>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><p style=\"margin: 10px auto; padding: 0px;\">所以只是一个小小的改动</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&lt;div&nbsp;class=&quot;container&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;middle-container&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;middle&quot;&gt;测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试&lt;/div&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;left&quot;&gt;left&lt;/div&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;right&quot;&gt;right&lt;/div&gt;&lt;/div&gt;</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.middle-container{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100%;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;paleturquoise;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float:&nbsp;left;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.middle{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin-left:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin-right:&nbsp;200px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.left{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;palevioletred;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float:&nbsp;left;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;40px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#fff;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin-left:-100%;\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.right{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;200px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;purple;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size:&nbsp;40px;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float:&nbsp;left;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;#fff;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin-left:-200px;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin: 10px auto; padding: 0px;\">这样，在我们将中间元素宽度调到比两边元素小的时候，也是可以正常显示，但是如果总宽度小于左边元素或者右边元素的时候，还是会有问题。</p><p><img class=\"medium-zoom-image\" src=\"https://user-gold-cdn.xitu.io/2017/8/20/61d393d131af1b12351d76dd2e2c288c?imageView2/0/w/1280/h/960\" alt=\"双飞翼布局\" style=\"margin: 0px; padding: 0px; border: 0px; height: auto; max-width: 100%;\"/>双飞翼布局</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p><br/></p>",
        "type_url": "https://www.cnblogs.com/asand/p/7417934.html",
        "type": "技术",
        "category": "技术",
        "user_info_nick": "qyq",
        "user_info_cover": "//www.gravatar.com/avatar/6812bbadcf52b6ef6b5ad14f90f0be9c?s=200&r=pg&d=mm",
        "user_info_id": "5ef75a6299d6040b785444fc",
        "seo_title": "css",
        "cover": "https://img-blog.csdnimg.cn/20200223142157134.gif",
        "created": 1593928507995,
        "__v": 0
      },
      {
        "summary": "面试时遇到的一些问题 和字节总结的一些",
        "tags": [
          "j"
        ],
        "is_private": true,
        "status": "draft",
        "read": 0,
        "praise": 0,
        "review": 0,
        "toped": false,
        "hotted": false,
        "weight": 0,
        "_id": "5f09931f207ae71410e83de9",
        "title": "js问题修改",
        "content": "<p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;判断js对象是否拥有某一个属性</span></p><p>obj.hasOwnProperty(&#39;name&#39;)</p><p>hasOwnProperty&nbsp;判断是否是对象自身的属性&nbsp;要是获取原型的属性可以用&nbsp;.&nbsp;或者in</p><p>instanceof&nbsp;可以确定一个对象是否是特定构造函数的实例</p><p>Reflect.get()</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;手机一像素问题</span></p><p><span style=\"color: #6796e6;\">*</span>&nbsp;图片替换&nbsp;背景替换</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;shadow&nbsp;模拟</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;viewport+rem+js&nbsp;根据dpr动态修改viewport</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;数组去重&nbsp;</span></p><p>Array.from(new&nbsp;Set(arr))</p><p>const&nbsp;res&nbsp;=&nbsp;new&nbsp;Map();</p><p>arr.filter((a)&nbsp;=&gt;&nbsp;!res.has(a)&nbsp;&amp;&amp;&nbsp;res.set(a,&nbsp;1))</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;元素居中&nbsp;</span></p><p>&nbsp;justify-content:&nbsp;center&nbsp;align-items:&nbsp;center;</p><p>&nbsp;justify-items&nbsp;align-items</p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;for循环中&nbsp;异步操作</span></p><p>&nbsp;promise中，使用then处理</p><p>&nbsp;回调</p><p>&nbsp;async&nbsp;await</p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;webpack&nbsp;配置</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;router连续点击多次路由报错解决方法</span></p><p>&nbsp;vue-router&nbsp;升级到3.1.x&nbsp;后，重复点击导航时，控制台出现报错&nbsp;</p><p>&nbsp;回调形式改成promise&nbsp;api了，返回的是promise，如果没有捕获到错误，控制台始终会出现如上图的警告</p><p>&nbsp;重写push&nbsp;catch捕获异常&nbsp;手动删除原有路由</p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;判断一个对象是否是空对象&nbsp;</span></p><p>&nbsp;1，装换成字符串&nbsp;stringify&nbsp;</p><p>&nbsp;<span style=\"color: #6796e6;\">2.</span>&nbsp;for&nbsp;in</p><p>&nbsp;<span style=\"color: #6796e6;\">3.</span>&nbsp;keys</p><p><br/></p><p>&nbsp;</p><p><br/><br/></p><p><br/></p>",
        "type_url": "",
        "type": "笔记",
        "category": "笔记",
        "user_info_cover": "//www.gravatar.com/avatar/6812bbadcf52b6ef6b5ad14f90f0be9c?s=200&r=pg&d=mm",
        "user_info_id": "5ef75a6299d6040b785444fc",
        "seo_title": "js问题",
        "cover": "http://pic.ik123.com/uploads/allimg/170302/4-1F3021R536.jpg",
        "created": 1594463007533,
        "__v": 0
      },
      {
        "summary": "面试时遇到的一些问题 和字节总结的一些",
        "tags": [
          "js"
        ],
        "is_private": true,
        "status": "draft",
        "read": 0,
        "praise": 0,
        "review": 0,
        "toped": false,
        "hotted": false,
        "weight": 0,
        "_id": "5f099509207ae71410e83dea",
        "title": "js问题",
        "content": "<p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;判断js对象是否拥有某一个属性</span></p><p>obj.hasOwnProperty(&#39;name&#39;)</p><p>hasOwnProperty&nbsp;判断是否是对象自身的属性&nbsp;要是获取原型的属性可以用&nbsp;.&nbsp;或者in</p><p>instanceof&nbsp;可以确定一个对象是否是特定构造函数的实例</p><p>Reflect.get()</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;手机一像素问题</span></p><p><span style=\"color: #6796e6;\">*</span>&nbsp;图片替换&nbsp;背景替换</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;shadow&nbsp;模拟</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;viewport+rem+js&nbsp;根据dpr动态修改viewport</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;数组去重&nbsp;</span></p><p>Array.from(new&nbsp;Set(arr))</p><p>const&nbsp;res&nbsp;=&nbsp;new&nbsp;Map();</p><p>arr.filter((a)&nbsp;=&gt;&nbsp;!res.has(a)&nbsp;&amp;&amp;&nbsp;res.set(a,&nbsp;1))</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;元素居中&nbsp;</span></p><p>&nbsp;justify-content:&nbsp;center&nbsp;align-items:&nbsp;center;</p><p>&nbsp;justify-items&nbsp;align-items</p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;for循环中&nbsp;异步操作</span></p><p>&nbsp;promise中，使用then处理</p><p>&nbsp;回调</p><p>&nbsp;async&nbsp;await</p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;webpack&nbsp;配置</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;router连续点击多次路由报错解决方法</span></p><p>&nbsp;vue-router&nbsp;升级到3.1.x&nbsp;后，重复点击导航时，控制台出现报错&nbsp;</p><p>&nbsp;回调形式改成promise&nbsp;api了，返回的是promise，如果没有捕获到错误，控制台始终会出现如上图的警告</p><p>&nbsp;重写push&nbsp;catch捕获异常&nbsp;手动删除原有路由</p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;判断一个对象是否是空对象&nbsp;</span></p><p>&nbsp;1，装换成字符串&nbsp;stringify&nbsp;</p><p>&nbsp;<span style=\"color: #6796e6;\">2.</span>&nbsp;for&nbsp;in</p><p>&nbsp;<span style=\"color: #6796e6;\">3.</span>&nbsp;keys</p><p><br/></p><p>&nbsp;</p><p><br/><br/></p><p><br/></p>",
        "type_url": "",
        "type": "笔记",
        "category": "笔记",
        "user_info_cover": "//www.gravatar.com/avatar/6812bbadcf52b6ef6b5ad14f90f0be9c?s=200&r=pg&d=mm",
        "user_info_id": "5ef75a6299d6040b785444fc",
        "seo_title": "js问题",
        "cover": "http://pic.ik123.com/uploads/allimg/170302/4-1F3021R536.jpg",
        "created": 1594463497531,
        "__v": 0
      },
      {
        "summary": "面试时遇到的一些问题 和字节总结的一些",
        "tags": [
          "js"
        ],
        "is_private": true,
        "status": "draft",
        "read": 0,
        "praise": 0,
        "review": 0,
        "toped": false,
        "hotted": false,
        "weight": 0,
        "_id": "5f099534207ae71410e83deb",
        "title": "js问题膝盖",
        "content": "<p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;判断js对象是否拥有某一个属性</span></p><p>obj.hasOwnProperty(&#39;name&#39;)</p><p>hasOwnProperty&nbsp;判断是否是对象自身的属性&nbsp;要是获取原型的属性可以用&nbsp;.&nbsp;或者in</p><p>instanceof&nbsp;可以确定一个对象是否是特定构造函数的实例</p><p>Reflect.get()</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;手机一像素问题</span></p><p><span style=\"color: #6796e6;\">*</span>&nbsp;图片替换&nbsp;背景替换</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;shadow&nbsp;模拟</p><p><span style=\"color: #6796e6;\">*</span>&nbsp;viewport+rem+js&nbsp;根据dpr动态修改viewport</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;数组去重&nbsp;</span></p><p>Array.from(new&nbsp;Set(arr))</p><p>const&nbsp;res&nbsp;=&nbsp;new&nbsp;Map();</p><p>arr.filter((a)&nbsp;=&gt;&nbsp;!res.has(a)&nbsp;&amp;&amp;&nbsp;res.set(a,&nbsp;1))</p><p><span style=\"color: #569cd6;font-weight: bold;\">##&nbsp;元素居中&nbsp;</span></p><p>&nbsp;justify-content:&nbsp;center&nbsp;align-items:&nbsp;center;</p><p>&nbsp;justify-items&nbsp;align-items</p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;for循环中&nbsp;异步操作</span></p><p>&nbsp;promise中，使用then处理</p><p>&nbsp;回调</p><p>&nbsp;async&nbsp;await</p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;webpack&nbsp;配置</span></p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;router连续点击多次路由报错解决方法</span></p><p>&nbsp;vue-router&nbsp;升级到3.1.x&nbsp;后，重复点击导航时，控制台出现报错&nbsp;</p><p>&nbsp;回调形式改成promise&nbsp;api了，返回的是promise，如果没有捕获到错误，控制台始终会出现如上图的警告</p><p>&nbsp;重写push&nbsp;catch捕获异常&nbsp;手动删除原有路由</p><p><span style=\"color: #569cd6;font-weight: bold;\">&nbsp;##&nbsp;判断一个对象是否是空对象&nbsp;</span></p><p>&nbsp;1，装换成字符串&nbsp;stringify&nbsp;</p><p>&nbsp;<span style=\"color: #6796e6;\">2.</span>&nbsp;for&nbsp;in</p><p>&nbsp;<span style=\"color: #6796e6;\">3.</span>&nbsp;keys</p><p><br/></p><p>&nbsp;</p><p><br/><br/></p><p><br/></p>",
        "type_url": "",
        "type": "笔记",
        "category": "笔记",
        "user_info_cover": "//www.gravatar.com/avatar/6812bbadcf52b6ef6b5ad14f90f0be9c?s=200&r=pg&d=mm",
        "user_info_id": "5ef75a6299d6040b785444fc",
        "seo_title": "js问题",
        "cover": "http://pic.ik123.com/uploads/allimg/170302/4-1F3021R536.jpg",
        "created": 1594463540801,
        "__v": 0
      },
      {
        "summary": "测试文章简介",
        "tags": [
          "技术"
        ],
        "is_private": true,
        "status": "draft",
        "read": 0,
        "praise": 0,
        "review": 0,
        "toped": false,
        "hotted": false,
        "weight": 0,
        "_id": "5f0997f178337515b481f17d",
        "title": "测试文章标题",
        "content": "测试文章内容",
        "type_url": "转载url",
        "type": "技术",
        "category": "文章分类",
        "user_info_nick": "qyq",
        "user_info_cover": "//www.gravatar.com/avatar/6812bbadcf52b6ef6b5ad14f90f0be9c?s=200&r=pg&d=mm",
        "user_info_id": "5ef75a6299d6040b785444fc",
        "seo_title": "测试文章",
        "cover": "//www.gravatar.com/avatar/6812bbadcf52b6ef6b5ad14f90f0be9c?s=200&r=pg&d=mm",
        "created": 1594464241636,
        "__v": 0
      }
    ],
    isArticleList: true
  },
  getters: {
    getArticle: (state) => {
      return {
        articleType: state.articleType,
        articleCategory: state.articleCategory,
        articleId: state.article_id
      }
    },
    getIsArticleList: (state) => {
      return state.isArticleList
    },
    getArticleList: (state) => {
      return state.articleList
    }
  },
  mutations: {

    /**
     * [setLogin 设置登录信息状态]
     */
    setArticleList(state, data) {
      state.articleList = data
      state.isArticleList = true
    },
    setIsArticleList(state, data) {
      state.isArticleList = data
    }
  },
  actions: {

    async handleUptateArticle({
      commit
    }, data) {
      let article = await uptateArticle(data)
      commit('setIsArticleList', false)
      return article
    },
    async handleDeleteArticle({
      commit
    }, data) {
      let article = await deleteArticle(data)
      commit('setIsArticleList', false)
      return article
    },
    async handleGetArticle({
      commit
    }, data) {
      let article = await getArticle(data)
      commit('setIsArticleList', false)
      return article
    },
    async handleAddArticle({
      commit
    }, data) {
      let article = await addArticle(data)
      commit('setIsArticleList', false)
      return article
    },
    async handleArticles({
      commit,
      state
    }, data) {
      if (state.isArticleList) {
        return state.articleList
      } else {
        // console.log(data)
        let article = await allArticle(data)
        commit('setArticleList', article.data.message)
        commit('setIsArticleList', true)
        return article.data.message
      }
    },
  }
}